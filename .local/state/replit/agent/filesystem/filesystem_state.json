{"file_contents":{"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/storage.ts":{"content":"import { type Notebook, type InsertNotebook, type Section, type InsertSection, type SectionVersion, type User, type InsertUser, type Message, type InsertMessage, type Transaction, type InsertTransaction, notebooks, sections, sectionVersions, users, messages, transactions } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // User operations (required for standalone auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserAiModel(userId: string, model: string): Promise<void>;\n  \n  // Session store\n  sessionStore: session.Store;\n  \n  // Notebooks\n  getNotebooks(userId: string): Promise<Notebook[]>;\n  getNotebook(id: string): Promise<Notebook | undefined>;\n  createNotebook(notebook: InsertNotebook & { userId: string }): Promise<Notebook>;\n  updateNotebook(id: string, notebook: Partial<InsertNotebook>): Promise<Notebook | undefined>;\n  updateNotebookAiMemory(id: string, aiMemory: any): Promise<Notebook | undefined>;\n  deleteNotebook(id: string): Promise<void>;\n  \n  // Sections\n  getSection(id: string): Promise<Section | undefined>;\n  getSectionsByNotebookId(notebookId: string): Promise<Section[]>;\n  createSection(section: InsertSection): Promise<Section>;\n  updateSection(id: string, content: string): Promise<Section | undefined>;\n  deleteSection(id: string): Promise<void>;\n  \n  // Section Versions\n  getSectionVersions(sectionId: string): Promise<SectionVersion[]>;\n  restoreSectionVersion(sectionId: string, versionId: string): Promise<Section | undefined>;\n  \n  // Messages\n  getMessagesByNotebookId(notebookId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Credits and Transactions\n  addCredits(userId: string, credits: number, stripePaymentId: string, description: string): Promise<void>;\n  deductCredits(userId: string, credits: number, description: string): Promise<boolean>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ pool, createTableIfMissing: false, tableName: \"sessions\" });\n  }\n\n  // User operations (required for standalone auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  // Notebooks\n  async getNotebooks(userId: string): Promise<Notebook[]> {\n    return await db.select().from(notebooks).where(eq(notebooks.userId, userId)).orderBy(desc(notebooks.updatedAt));\n  }\n\n  async getNotebook(id: string): Promise<Notebook | undefined> {\n    const result = await db.select().from(notebooks).where(eq(notebooks.id, id));\n    return result[0];\n  }\n\n  async createNotebook(insertNotebook: InsertNotebook & { userId: string }): Promise<Notebook> {\n    const result = await db.insert(notebooks).values(insertNotebook).returning();\n    return result[0];\n  }\n\n  async updateNotebook(id: string, updates: Partial<InsertNotebook>): Promise<Notebook | undefined> {\n    const result = await db.update(notebooks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(notebooks.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateNotebookAiMemory(id: string, aiMemory: any): Promise<Notebook | undefined> {\n    const result = await db.update(notebooks)\n      .set({ aiMemory, updatedAt: new Date() })\n      .where(eq(notebooks.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteNotebook(id: string): Promise<void> {\n    await db.delete(notebooks).where(eq(notebooks.id, id));\n  }\n\n  // Sections\n  async getSection(id: string): Promise<Section | undefined> {\n    const [section] = await db.select().from(sections).where(eq(sections.id, id));\n    return section;\n  }\n\n  async getSectionsByNotebookId(notebookId: string): Promise<Section[]> {\n    return await db.select()\n      .from(sections)\n      .where(eq(sections.notebookId, notebookId))\n      .orderBy(asc(sections.orderIndex));\n  }\n\n  async createSection(insertSection: InsertSection): Promise<Section> {\n    const result = await db.insert(sections).values(insertSection).returning();\n    return result[0];\n  }\n\n  async updateSection(id: string, content: string): Promise<Section | undefined> {\n    // Get current section to save its content as a version\n    const currentSection = await this.getSection(id);\n    if (currentSection && currentSection.content) {\n      // Save current content as a version before updating\n      await db.insert(sectionVersions).values({\n        sectionId: id,\n        content: currentSection.content,\n      });\n    }\n    \n    const result = await db.update(sections)\n      .set({ content })\n      .where(eq(sections.id, id))\n      .returning();\n    \n    if (result[0]) {\n      await db.update(notebooks)\n        .set({ updatedAt: new Date() })\n        .where(eq(notebooks.id, result[0].notebookId));\n    }\n    \n    return result[0];\n  }\n\n  async deleteSection(id: string): Promise<void> {\n    await db.delete(sections).where(eq(sections.id, id));\n  }\n\n  // Section Versions\n  async getSectionVersions(sectionId: string): Promise<SectionVersion[]> {\n    return await db.select()\n      .from(sectionVersions)\n      .where(eq(sectionVersions.sectionId, sectionId))\n      .orderBy(desc(sectionVersions.createdAt));\n  }\n\n  async restoreSectionVersion(sectionId: string, versionId: string): Promise<Section | undefined> {\n    // Get the version to restore\n    const [version] = await db.select()\n      .from(sectionVersions)\n      .where(eq(sectionVersions.id, versionId));\n    \n    if (!version) {\n      return undefined;\n    }\n\n    // Update the section with the version's content (this will also save current content as a new version)\n    return await this.updateSection(sectionId, version.content);\n  }\n\n  // Messages\n  async getMessagesByNotebookId(notebookId: string): Promise<Message[]> {\n    return await db.select()\n      .from(messages)\n      .where(eq(messages.notebookId, notebookId))\n      .orderBy(asc(messages.createdAt));\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(insertMessage).returning();\n    return result[0];\n  }\n\n  // Credits and Transactions\n  async getUserById(id: string): Promise<User | undefined> {\n    return await this.getUser(id);\n  }\n\n  async updateUserAiModel(userId: string, model: string): Promise<void> {\n    await db.update(users)\n      .set({ selectedAiModel: model })\n      .where(eq(users.id, userId));\n  }\n\n  async addCredits(userId: string, credits: number, stripePaymentId: string, description: string): Promise<void> {\n    // Add credits to user\n    await db.update(users)\n      .set({ credits: sql`${users.credits} + ${credits}` })\n      .where(eq(users.id, userId));\n    \n    // Record transaction\n    await db.insert(transactions).values({\n      userId,\n      type: \"purchase\",\n      amount: credits,\n      stripePaymentId,\n      description,\n    });\n  }\n\n  async deductCredits(userId: string, credits: number, description: string): Promise<boolean> {\n    const user = await this.getUserById(userId);\n    if (!user || user.credits < credits) {\n      return false;\n    }\n\n    // Deduct credits\n    await db.update(users)\n      .set({ credits: sql`${users.credits} - ${credits}` })\n      .where(eq(users.id, userId));\n    \n    // Record transaction\n    await db.insert(transactions).values({\n      userId,\n      type: \"deduction\",\n      amount: -credits,\n      description,\n    });\n\n    // If credits hit zero, auto-downgrade to free tier\n    const updatedUser = await this.getUserById(userId);\n    if (updatedUser && updatedUser.credits <= 0) {\n      await this.updateUserAiModel(userId, \"free\");\n    }\n\n    return true;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return await db.select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8759},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/AIPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Check, X, RotateCcw } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport type { Section } from \"@shared/schema\";\n\ninterface AIPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sections: Section[];\n  activeSectionId: string | null;\n  onAccept: (content: string) => void;\n}\n\nexport function AIPanel({ isOpen, onClose, sections, activeSectionId, onAccept }: AIPanelProps) {\n  const [prompt, setPrompt] = useState(\"\");\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n\n  const generateMutation = useMutation({\n    mutationFn: async (data: { prompt: string; context: Array<{ title: string; content: string }> }) => {\n      const response = await fetch(\"/api/ai/generate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedContent(data.content);\n    },\n  });\n\n  const handleGenerate = () => {\n    // Build context from sections that have content\n    const context = sections\n      .filter(s => s.content)\n      .map(s => ({ title: s.title, content: s.content }));\n    \n    generateMutation.mutate({ prompt, context });\n  };\n\n  const handleRegenerate = () => {\n    handleGenerate();\n  };\n\n  const handleAccept = () => {\n    onAccept(generatedContent);\n    setGeneratedContent(\"\");\n    setPrompt(\"\");\n  };\n\n  const handleDiscard = () => {\n    setGeneratedContent(\"\");\n  };\n\n  if (!isOpen) return null;\n\n  const sectionsWithContent = sections.filter(s => s.content);\n  const activeSection = sections.find(s => s.id === activeSectionId);\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 w-96 bg-card border-l border-card-border shadow-xl z-50 flex flex-col\">\n      <div className=\"p-4 border-b border-card-border flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n          <h3 className=\"font-semibold text-foreground\">AI Assistant</h3>\n        </div>\n        <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-ai-panel\">\n          <X className=\"h-5 w-5\" />\n        </Button>\n      </div>\n\n      <div className=\"flex-1 overflow-auto p-4 space-y-4\">\n        {activeSection && (\n          <div>\n            <label className=\"text-sm font-medium mb-2 block text-foreground\">\n              Generating for\n            </label>\n            <Badge variant=\"secondary\">{activeSection.title}</Badge>\n          </div>\n        )}\n\n        <div>\n          <label className=\"text-sm font-medium mb-2 block text-foreground\">\n            Context Awareness\n          </label>\n          <div className=\"flex flex-wrap gap-2\">\n            {sections.map((section) => (\n              <Badge \n                key={section.id}\n                variant={section.content ? \"secondary\" : \"outline\"}\n                className={section.content ? \"gap-1\" : \"\"}\n              >\n                {section.content && <Check className=\"h-3 w-3\" />}\n                {section.title}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium mb-2 block text-foreground\">\n            What would you like to generate?\n          </label>\n          <Textarea\n            placeholder=\"E.g., 'Write an introduction based on the experimental setup...'\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            className=\"min-h-[100px]\"\n            data-testid=\"textarea-ai-prompt\"\n          />\n        </div>\n\n        <Button \n          className=\"w-full gap-2\" \n          onClick={handleGenerate}\n          disabled={generateMutation.isPending || !prompt}\n          data-testid=\"button-generate\"\n        >\n          <Sparkles className=\"h-4 w-4\" />\n          {generateMutation.isPending ? \"Generating...\" : \"Generate\"}\n        </Button>\n\n        {generatedContent && (\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"text-sm font-medium text-foreground\">Generated Content</h4>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"h-8 w-8\"\n                onClick={handleRegenerate}\n                disabled={generateMutation.isPending}\n                data-testid=\"button-regenerate\"\n              >\n                <RotateCcw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {generateMutation.isPending ? (\n              <div className=\"space-y-2\">\n                <div className=\"h-4 bg-muted rounded animate-pulse\" />\n                <div className=\"h-4 bg-muted rounded animate-pulse w-5/6\" />\n                <div className=\"h-4 bg-muted rounded animate-pulse w-4/6\" />\n              </div>\n            ) : (\n              <>\n                <p className=\"text-sm text-foreground leading-relaxed mb-4 whitespace-pre-wrap\">\n                  {generatedContent}\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" className=\"flex-1 gap-2\" onClick={handleAccept} data-testid=\"button-accept\">\n                    <Check className=\"h-4 w-4\" />\n                    Accept\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 gap-2\" onClick={handleDiscard} data-testid=\"button-discard\">\n                    <X className=\"h-4 w-4\" />\n                    Discard\n                  </Button>\n                </div>\n              </>\n            )}\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5933},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeProvider } from \"../ThemeProvider\";\nimport { ThemeToggle } from \"../ThemeToggle\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4 bg-background\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":282},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from \"../app-sidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex-1 p-6 bg-background\">\n          <h2 className=\"text-2xl font-semibold\">Main Content Area</h2>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":562},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/neon-serverless';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from 'ws';\n\nneonConfig.webSocketConstructor = ws;\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL! });\nexport const db = drizzle({ client: pool });\n","size_bytes":301},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Templates.tsx":{"content":"import { TemplateCard } from \"@/components/TemplateCard\";\nimport { Beaker, FileCode, Wrench, FlaskConical, Microscope, Cpu } from \"lucide-react\";\n\nconst templates = [\n  {\n    icon: Beaker,\n    title: \"Lab Report\",\n    description: \"Standard laboratory experiment documentation with objectives, methods, results, and discussion\",\n    sections: [\"Objectives\", \"Methods\", \"Observations\", \"Discussion\", \"Conclusion\"],\n  },\n  {\n    icon: FileCode,\n    title: \"Design Document\",\n    description: \"Technical design documentation for engineering projects and system architecture\",\n    sections: [\"Overview\", \"Requirements\", \"Design\", \"Implementation\", \"Testing\"],\n  },\n  {\n    icon: Wrench,\n    title: \"Project Log\",\n    description: \"Daily or weekly project progress tracking with milestones and action items\",\n    sections: [\"Summary\", \"Progress\", \"Challenges\", \"Next Steps\"],\n  },\n  {\n    icon: FlaskConical,\n    title: \"Research Notes\",\n    description: \"Academic research documentation with literature review and methodology\",\n    sections: [\"Background\", \"Literature\", \"Methodology\", \"Findings\", \"Analysis\"],\n  },\n  {\n    icon: Microscope,\n    title: \"Experiment Protocol\",\n    description: \"Detailed experimental procedure and safety protocols\",\n    sections: [\"Introduction\", \"Materials\", \"Procedure\", \"Safety\", \"Expected Results\"],\n  },\n  {\n    icon: Cpu,\n    title: \"System Analysis\",\n    description: \"Engineering system analysis and performance evaluation\",\n    sections: [\"System Overview\", \"Analysis\", \"Performance\", \"Optimization\", \"Recommendations\"],\n  },\n];\n\nexport default function Templates() {\n  return (\n    <div className=\"min-h-screen p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-semibold mb-3 text-foreground\">Engineering Templates</h1>\n          <p className=\"text-muted-foreground\">\n            Choose from our collection of professional engineering notebook templates\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {templates.map((template) => (\n            <TemplateCard\n              key={template.title}\n              {...template}\n              onSelect={() => console.log(`Selected ${template.title}`)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2356},"client/src/components/examples/HeroSection.tsx":{"content":"import { HeroSection } from \"../HeroSection\";\n\nexport default function HeroSectionExample() {\n  return <HeroSection />;\n}\n","size_bytes":122},"client/src/components/TemplateCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface TemplateCardProps {\n  icon: LucideIcon;\n  title: string;\n  description: string;\n  sections: string[];\n  onSelect: () => void;\n}\n\nexport function TemplateCard({ icon: Icon, title, description, sections, onSelect }: TemplateCardProps) {\n  return (\n    <Card className=\"p-8 hover-elevate transition-all text-center\">\n      <div className=\"h-16 w-16 rounded-2xl bg-primary/10 flex items-center justify-center mx-auto mb-6\">\n        <Icon className=\"h-8 w-8 text-primary\" />\n      </div>\n      \n      <h3 className=\"font-semibold mb-2 text-foreground text-lg\">{title}</h3>\n      <p className=\"text-sm text-muted-foreground mb-6\">{description}</p>\n      \n      <Button \n        className=\"w-full rounded-full\" \n        onClick={onSelect}\n        data-testid={`button-select-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n      >\n        Use Template\n      </Button>\n    </Card>\n  );\n}\n","size_bytes":1026},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/examples/TemplateCard.tsx":{"content":"import { TemplateCard } from \"../TemplateCard\";\nimport { Beaker } from \"lucide-react\";\n\nexport default function TemplateCardExample() {\n  return (\n    <div className=\"p-6 bg-background max-w-md\">\n      <TemplateCard\n        icon={Beaker}\n        title=\"Lab Report\"\n        description=\"Standard laboratory experiment documentation\"\n        sections={[\"Objectives\", \"Methods\", \"Results\", \"Discussion\"]}\n        onSelect={() => console.log(\"Template selected\")}\n      />\n    </div>\n  );\n}\n","size_bytes":487},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/app-sidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { FileText, Home, Settings, Search, Zap, CreditCard, User, Palette } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Notebook } from \"@shared/schema\";\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { data: notebooks = [] } = useQuery<Notebook[]>({\n    queryKey: [\"/api/notebooks\"],\n  });\n\n  const privatePages = notebooks.slice(0, 10);\n  const isSettingsPage = location === \"/settings\";\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4 space-y-4\">\n        <Link href=\"/\" className=\"inline-flex hover-elevate active-elevate-2 rounded-lg px-3 py-2 bg-primary\" data-testid=\"link-home-logo\">\n          <span className=\"font-semibold text-primary-foreground\">Notebookr</span>\n        </Link>\n        \n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input \n            placeholder=\"Search\" \n            className=\"pl-9 bg-sidebar-accent border-0\"\n            data-testid=\"input-search\"\n          />\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton asChild>\n                  <Link href=\"/\" data-testid=\"link-home\">\n                    <Home className=\"h-4 w-4\" />\n                    <span>Home</span>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {isSettingsPage && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Settings</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild>\n                    <a href=\"#premium-features\" data-testid=\"link-settings-premium\">\n                      <Zap className=\"h-4 w-4\" />\n                      <span>Premium Features</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild>\n                    <a href=\"#billing\" data-testid=\"link-settings-billing\">\n                      <CreditCard className=\"h-4 w-4\" />\n                      <span>Billing</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild>\n                    <a href=\"#account\" data-testid=\"link-settings-account\">\n                      <User className=\"h-4 w-4\" />\n                      <span>Account</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild>\n                    <a href=\"#preferences\" data-testid=\"link-settings-preferences\">\n                      <Palette className=\"h-4 w-4\" />\n                      <span>Preferences</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {!isSettingsPage && privatePages.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Private</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {privatePages.map((page) => (\n                  <SidebarMenuItem key={page.id}>\n                    <SidebarMenuButton asChild>\n                      <Link href={`/notebook/${page.id}`} data-testid={`link-notebook-${page.id}`}>\n                        <FileText className=\"h-4 w-4\" />\n                        <span className=\"truncate\">{page.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild>\n              <Link href=\"/settings\" data-testid=\"link-settings\">\n                <Settings className=\"h-4 w-4\" />\n                <span>Settings</span>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4912},"client/src/App.tsx":{"content":"// Based on blueprint:javascript_auth_all_persistance\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Auth from \"@/pages/Auth\";\nimport Home from \"@/pages/Home\";\nimport Notebook from \"@/pages/Notebook\";\nimport Templates from \"@/pages/Templates\";\nimport Settings from \"@/pages/Settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={Auth} />\n      <ProtectedRoute path=\"/\" component={Home} />\n      <ProtectedRoute path=\"/notebook/:id\" component={Notebook} />\n      <ProtectedRoute path=\"/templates\" component={Templates} />\n      <ProtectedRoute path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppLayout() {\n  const [location] = useLocation();\n  const { isAuthenticated } = useAuth();\n  const isAuthPage = location === \"/auth\";\n\n  // Show auth page without sidebar when on /auth\n  if (isAuthPage || !isAuthenticated) {\n    return <Router />;\n  }\n\n  const style = {\n    \"--sidebar-width\": \"15rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <main className=\"flex-1 overflow-auto\">\n          <Router />\n        </main>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AppLayout />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2118},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":585},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1151},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/Notebook.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Send, Sparkles, FileText, User, Bot, Loader2, Maximize2, Minimize2, MoreVertical, Trash2, Edit2, ChevronDown, ChevronRight } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { Notebook as NotebookType, Section } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface Message {\n  id: string;\n  role: \"user\" | \"assistant\" | \"system\";\n  content: string;\n  messageType?: \"status\" | \"completion\"; // status=yellow collapsible, completion=green visible\n  sectionTitle?: string;\n  sectionContent?: string; // Actual section content for expandable messages\n  isExpandable?: boolean;\n  expanded?: boolean;\n}\n\ninterface MessageGroup {\n  type: \"activity\" | \"message\";\n  messages: Message[];\n  expanded?: boolean;\n}\n\n// Group consecutive status messages into activity logs\nfunction groupMessages(messages: Message[]): MessageGroup[] {\n  const groups: MessageGroup[] = [];\n  let currentActivityGroup: Message[] = [];\n\n  for (const message of messages) {\n    if (message.messageType === \"status\") {\n      // Add to current activity group\n      currentActivityGroup.push(message);\n    } else {\n      // If we have accumulated status messages, create an activity group\n      if (currentActivityGroup.length > 0) {\n        groups.push({\n          type: \"activity\",\n          messages: [...currentActivityGroup],\n          expanded: false\n        });\n        currentActivityGroup = [];\n      }\n      // Add regular message\n      groups.push({\n        type: \"message\",\n        messages: [message]\n      });\n    }\n  }\n\n  // Don't forget final activity group\n  if (currentActivityGroup.length > 0) {\n    groups.push({\n      type: \"activity\",\n      messages: [...currentActivityGroup],\n      expanded: false\n    });\n  }\n\n  return groups;\n}\n\nexport default function Notebook() {\n  const { id } = useParams<{ id: string }>();\n  const { user } = useAuth();\n  const [title, setTitle] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      role: \"assistant\",\n      content: \"Ready to edit your notebook. Give me instructions and I'll update the sections directly.\"\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [selectedSection, setSelectedSection] = useState<Section | null>(null);\n  const [editingSections, setEditingSections] = useState<Set<string>>(new Set());\n  const [aiPhase, setAiPhase] = useState<\"plan\" | \"execute\" | \"review\" | null>(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentPlan, setCurrentPlan] = useState<any>(null);\n  const [persistedAiMemory, setPersistedAiMemory] = useState<any>(null);\n  const [recentlyUpdatedSections, setRecentlyUpdatedSections] = useState<Set<string>>(new Set());\n  const [processingStartTime, setProcessingStartTime] = useState<number | null>(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isContextOpen, setIsContextOpen] = useState(\"context\");\n  const [expandedActivityLogs, setExpandedActivityLogs] = useState<Set<number>>(new Set());\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});\n\n  const { data: notebook } = useQuery<NotebookType>({\n    queryKey: [\"/api/notebooks\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/notebooks/${id}`);\n      return response.json();\n    },\n  });\n\n  const { data: sections = [], isLoading: sectionsLoading } = useQuery<Section[]>({\n    queryKey: [\"/api/notebooks\", id, \"sections\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/notebooks/${id}/sections`);\n      return response.json();\n    },\n    enabled: !!id && id !== \"undefined\",\n  });\n\n  const { data: loadedMessages = [], isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/notebooks\", id, \"messages\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/notebooks/${id}/messages`);\n      return response.json();\n    },\n    enabled: !!id && id !== \"undefined\",\n  });\n\n  useEffect(() => {\n    if (notebook) {\n      setTitle(notebook.title);\n      // Load document context (variables) from persisted aiMemory\n      if (notebook.aiMemory) {\n        const memory = notebook.aiMemory as any;\n        setPersistedAiMemory(memory);\n        if (memory.plan) {\n          setCurrentPlan(memory.plan);\n        }\n      }\n    }\n  }, [notebook]);\n\n  // Load messages from database\n  useEffect(() => {\n    if (loadedMessages && loadedMessages.length > 0) {\n      // Add expanded: false for expandable messages (isExpandable is \"true\" string or null)\n      // For expandable messages, look up the current section content by title\n      const messagesWithExpanded = loadedMessages.map(msg => {\n        const isExpandable = (msg.isExpandable as any) === \"true\";\n        let sectionContent = undefined;\n        \n        if (isExpandable && msg.sectionTitle && sections.length > 0) {\n          const matchingSection = sections.find(s => s.title === msg.sectionTitle);\n          if (matchingSection) {\n            sectionContent = matchingSection.content;\n          }\n        }\n        \n        return {\n          ...msg,\n          isExpandable,\n          sectionContent,\n          expanded: isExpandable ? false : undefined\n        };\n      });\n      setMessages(messagesWithExpanded);\n    } else if (!messagesLoading && loadedMessages.length === 0) {\n      // If no messages exist, show welcome message (but don't save it)\n      setMessages([\n        {\n          id: \"welcome\",\n          role: \"assistant\",\n          content: \"Ready to edit your notebook. Give me instructions and I'll update the sections directly.\"\n        }\n      ]);\n    }\n  }, [loadedMessages, messagesLoading, sections]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Track elapsed time during AI processing\n  useEffect(() => {\n    if (processingStartTime) {\n      const interval = setInterval(() => {\n        setElapsedTime(Math.floor((Date.now() - processingStartTime) / 1000));\n      }, 1000);\n      return () => clearInterval(interval);\n    } else {\n      setElapsedTime(0);\n    }\n  }, [processingStartTime]);\n\n  const scrollToSection = (sectionId: string) => {\n    sectionRefs.current[sectionId]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n  };\n\n  const updateTitle = useMutation({\n    mutationFn: async (newTitle: string) => {\n      const response = await fetch(`/api/notebooks/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ title: newTitle }),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\", id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\"] });\n    },\n  });\n\n  const updateSection = useMutation({\n    mutationFn: async ({ sectionId, content }: { sectionId: string; content: string }) => {\n      const response = await fetch(`/api/sections/${sectionId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ content }),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\", id, \"sections\"] });\n    },\n  });\n\n  // Streaming AI generation - prevents 504 timeouts by keeping connection alive\n  const generateAIStreaming = async (\n    data: { \n      instruction: string; \n      notebookId: string; \n      sections: Array<{ id: string; title: string; content: string }>;\n      aiMemory?: any;\n    }\n  ): Promise<any> => {\n    const response = await fetch(\"/api/ai/generate/stream\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n\n    const reader = response.body?.getReader();\n    const decoder = new TextDecoder();\n    \n    if (!reader) {\n      throw new Error(\"No response body\");\n    }\n\n    let result: any = null;\n    let buffer = ''; // Buffer for incomplete SSE messages\n    \n    while (true) {\n      const { done, value } = await reader.read();\n      \n      if (done) break;\n      \n      // Add to buffer and process complete lines\n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split('\\n');\n      \n      // Keep last incomplete line in buffer\n      buffer = lines.pop() || '';\n      \n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6).trim();\n          \n          if (!data) continue; // Skip empty data\n          \n          try {\n            const event = JSON.parse(data);\n            \n            if (event.type === 'content_chunk') {\n              // Could show real-time updates here in the future\n              console.log('Chunk:', event.content);\n            } else if (event.type === 'progress') {\n              console.log('Progress:', event.message);\n            } else if (event.type === 'complete') {\n              result = event.result;\n            } else if (event.type === 'error') {\n              throw new Error(event.error);\n            } else if (event.type === 'close') {\n              return result;\n            }\n          } catch (e) {\n            // Skip invalid JSON\n            console.warn('Failed to parse SSE event:', data, e);\n          }\n        }\n      }\n    }\n    \n    return result;\n  };\n\n  // Non-streaming fallback (for now we'll use this)\n  const generateAI = useMutation({\n    mutationFn: async (data: { \n      instruction: string; \n      notebookId: string; \n      sections: Array<{ id: string; title: string; content: string }>;\n      aiMemory?: any;\n    }) => {\n      const response = await fetch(\"/api/ai/generate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      // Validate response has required fields\n      if (!result || typeof result !== 'object') {\n        throw new Error('Invalid response from AI service');\n      }\n      \n      return result;\n    },\n  });\n\n  const createSection = useMutation({\n    mutationFn: async (data: { notebookId: string; title: string; content: string; orderIndex: string }) => {\n      const response = await fetch(\"/api/sections\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\", id, \"sections\"] });\n    },\n  });\n\n  const saveMessage = useMutation({\n    mutationFn: async (data: { \n      notebookId: string; \n      role: \"user\" | \"assistant\"; \n      content: string;\n      messageType?: \"status\" | \"completion\";\n      sectionTitle?: string;\n    }) => {\n      const response = await fetch(\"/api/messages\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\", id, \"messages\"] });\n    },\n  });\n\n  const handleTitleBlur = () => {\n    if (title !== notebook?.title) {\n      updateTitle.mutate(title);\n    }\n  };\n\n  const handleSend = async () => {\n    if (!input.trim() || !Array.isArray(sections)) return;\n\n    console.log(\"🚀 User instruction:\", input);\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: \"user\",\n      content: input,\n    };\n    setMessages(prev => [...prev, userMessage]);\n    \n    // Save user message to database (no messageType for regular chat messages)\n    saveMessage.mutate({\n      notebookId: id!,\n      role: \"user\",\n      content: input\n    });\n    \n    const instruction = input;\n    setInput(\"\");\n    \n    try {\n      console.log(\"AI is editing notebook...\");\n      setProcessingStartTime(Date.now()); // Start tracking time\n      \n      // Keep calling AI until complete\n      let aiMemory: any = persistedAiMemory || undefined; // Use persisted memory if available\n      let isComplete = false;\n      let iterationCount = 0;\n      // No iteration limit - run until AI marks complete\n      while (!isComplete) {\n        iterationCount++;\n        \n        // Always fetch fresh sections before calling AI\n        const freshSectionsResponse = await fetch(`/api/notebooks/${id}/sections`);\n        const freshSections = await freshSectionsResponse.json();\n        const currentSections = Array.isArray(freshSections) ? freshSections.map((s: any) => ({ \n          id: s.id, \n          title: s.title, \n          content: s.content || '' \n        })) : [];\n        console.log(`📝 Fresh sections (iteration ${iterationCount}):`, currentSections);\n        \n        // Let AI service determine completion through its review/postprocess phases\n        // Don't early-exit - trust the AI workflow to complete properly\n        \n        // Track timing for this API call\n        const apiStartTime = Date.now();\n        // Use streaming to prevent 504 timeouts\n        const result = await generateAIStreaming({ \n          instruction: iterationCount === 1 ? instruction : \"\", // Send instruction on first iteration only\n          notebookId: id!, \n          sections: currentSections,\n          aiMemory\n        });\n        const apiEndTime = Date.now();\n        const apiDuration = ((apiEndTime - apiStartTime) / 1000).toFixed(2);\n        console.log(`AI Response (iteration ${iterationCount}):`, result);\n        console.log(`API call took ${apiDuration}s`);\n        \n        // Progress message is used internally for timing description, not shown separately\n        \n        // Create descriptive timing message based on what was actually done\n        const previousPhase = aiPhase; // Capture current phase before updating\n        let timingDescription = \"\";\n        \n        // Check if we have a progress message that tells us what section was written\n        if (result && result.progressMessage && result.progressMessage.includes(\"Writing\")) {\n          // Extract section name from progress message like \"Writing Introduction... (1/8 completed)\"\n          const sectionMatch = result.progressMessage.match(/Writing (.+?)\\.\\.\\./);\n          if (sectionMatch) {\n            timingDescription = `Completed ${sectionMatch[1]}`;\n          }\n        } \n        // Check what actions were performed - look up readable section name\n        if (!timingDescription && result && result.actions && result.actions.length > 0) {\n          const action = result.actions[0];\n          let sectionName = \"\";\n          \n          // For update actions, look up the section to get readable title\n          if (action.type === \"update\") {\n            const targetSection = currentSections.find(s => s.id === action.sectionId);\n            if (targetSection) {\n              sectionName = targetSection.title;\n            }\n          } else {\n            // For create actions, sectionId is the readable title\n            sectionName = action.sectionId;\n          }\n          \n          // Only set description if we have a readable section name (not a UUID)\n          if (sectionName && !sectionName.match(/^[0-9a-f]{8}-/)) {\n            timingDescription = `Completed ${sectionName}`;\n          }\n        }\n        // Check phase transitions\n        if (!timingDescription && result) {\n          if (previousPhase === null && result.phase === \"plan\") {\n            timingDescription = \"Completed planning\";\n          } else if (previousPhase === \"execute\" && result.phase === \"review\") {\n            timingDescription = \"Reviewed content\";\n          } else if (previousPhase === \"review\" && result.phase === \"postprocess\") {\n            timingDescription = \"Revised content\";\n          } else if (result.phase === \"plan\") {\n            timingDescription = \"Completed planning\";\n          } else if (result.phase === \"review\") {\n            timingDescription = \"Reviewed content\";\n          } else if (result.phase === \"postprocess\") {\n            timingDescription = \"Revised content\";\n          }\n        }\n        \n        // Only show timing message if we have a descriptive message\n        if (timingDescription) {\n          const timingMessage: Message = {\n            id: `timing-${Date.now()}`,\n            role: \"assistant\",\n            content: `${timingDescription} in ${apiDuration}s`,\n            messageType: \"status\"\n          };\n          setMessages(prev => [...prev, timingMessage]);\n          \n          // Save timing message to database\n          saveMessage.mutate({\n            notebookId: id!,\n            role: \"assistant\",\n            content: `${timingDescription} in ${apiDuration}s`,\n            messageType: \"status\"\n          } as any);\n        }\n        \n        // Update phase and plan\n        if (result) {\n          setAiPhase(result.phase || null);\n          if (result.plan) {\n            setCurrentPlan(result.plan);\n          }\n          \n          // Update phase without showing messages\n          // (Phase indicator is shown in the UI status bar instead)\n          \n          // Auto-generate title if it's still \"Untitled Notebook\" and AI suggested a title\n          if (notebook?.title === \"Untitled Notebook\" && result.suggestedTitle) {\n            setTitle(result.suggestedTitle);\n            updateTitle.mutate(result.suggestedTitle);\n          }\n        }\n\n        // Apply AI actions automatically (Cursor-style)\n        if (result && result.actions && Array.isArray(result.actions)) {\n          let createCount = 0;\n          for (const action of result.actions) {\n            // Validate action has required fields\n            if (!action.type || !action.sectionId || action.content === undefined) {\n              console.warn(`Skipping invalid action:`, action);\n              continue;\n            }\n\n            console.log(`Applying action: ${action.type} on ${action.sectionId}`);\n            \n            if (action.type === \"update\") {\n              // Find the section and update it\n              const targetSection = sections.find(s => s.id === action.sectionId);\n              if (targetSection) {\n                setEditingSections(prev => new Set(prev).add(targetSection.id));\n                setRecentlyUpdatedSections(prev => new Set(prev).add(targetSection.id));\n                try {\n                  await updateSection.mutateAsync({ \n                    sectionId: action.sectionId, \n                    content: action.content \n                  });\n                  console.log(`Updated section: ${targetSection.title}`);\n                  \n                  // Add completion message to chat (summary only - content is expandable)\n                  const completionMsg: Message = {\n                    id: `completion-${Date.now()}-${targetSection.id}`,\n                    role: \"system\",\n                    content: `Finished making: ${targetSection.title}`,\n                    messageType: \"completion\",\n                    sectionTitle: targetSection.title,\n                    sectionContent: action.content, // Store content separately for expansion\n                    isExpandable: true,\n                    expanded: false\n                  };\n                  setMessages(prev => [...prev, completionMsg]);\n                  \n                  // Save completion message to database (use assistant role for compatibility)\n                  saveMessage.mutate({\n                    notebookId: id!,\n                    role: \"assistant\" as any,\n                    content: `Finished making: ${targetSection.title}`,\n                    sectionTitle: targetSection.title,\n                    isExpandable: \"true\",\n                    messageType: \"completion\"\n                  } as any);\n                  \n                  // Clear the highlight after 2 seconds\n                  setTimeout(() => {\n                    setRecentlyUpdatedSections(prev => {\n                      const next = new Set(prev);\n                      next.delete(targetSection.id);\n                      return next;\n                    });\n                  }, 2000);\n                } catch (error) {\n                  console.error(`❌ Failed to update section ${targetSection.title}:`, error);\n                } finally {\n                  setEditingSections(prev => {\n                    const next = new Set(prev);\n                    next.delete(targetSection.id);\n                    return next;\n                  });\n                }\n              } else {\n                console.warn(`Section ${action.sectionId} not found for update`);\n              }\n            } else if (action.type === \"create\") {\n              // Create new section with unique orderIndex\n              try {\n                const newSection = await createSection.mutateAsync({\n                  notebookId: id!,\n                  title: action.sectionId,\n                  content: action.content,\n                  orderIndex: String(sections.length + createCount)\n                });\n                createCount++;\n                console.log(`Created new section: ${action.sectionId}`);\n                \n                // Add completion message to chat (summary only - content is expandable)\n                const completionMsg: Message = {\n                  id: `completion-${Date.now()}-${newSection.id}`,\n                  role: \"system\",\n                  content: `Finished making: ${action.sectionId}`,\n                  messageType: \"completion\",\n                  sectionTitle: action.sectionId,\n                  sectionContent: action.content, // Store content separately for expansion\n                  isExpandable: true,\n                  expanded: false\n                };\n                setMessages(prev => [...prev, completionMsg]);\n                \n                // Save completion message to database (use assistant role for compatibility)\n                saveMessage.mutate({\n                  notebookId: id!,\n                  role: \"assistant\" as any,\n                  content: `Finished making: ${action.sectionId}`,\n                  sectionTitle: action.sectionId,\n                  isExpandable: \"true\",\n                  messageType: \"completion\"\n                } as any);\n                \n                // Highlight new section\n                if (newSection?.id) {\n                  setRecentlyUpdatedSections(prev => new Set(prev).add(newSection.id));\n                  setTimeout(() => {\n                    setRecentlyUpdatedSections(prev => {\n                      const next = new Set(prev);\n                      next.delete(newSection.id);\n                      return next;\n                    });\n                  }, 2000);\n                }\n              } catch (error) {\n                console.error(`❌ Failed to create section ${action.sectionId}:`, error);\n              }\n            }\n          }\n          \n          // Refresh sections after all updates\n          queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\", id, \"sections\"] });\n        }\n        \n        // Check if work is complete\n        if (result) {\n          isComplete = result.isComplete || false;\n          aiMemory = result.aiMemory;\n          \n          // Break conditions\n          if (isComplete) {\n            console.log(\"AI reports work is complete\");\n            break;\n          }\n          \n          if (!result.shouldContinue) {\n            console.warn(\"AI paused (may have questions or need user input)\");\n            // Persist AI memory so user's answer can resume the flow\n            setPersistedAiMemory(result.aiMemory || aiMemory);\n            // Use the AI's actual message (may contain questions)\n            const pauseMessage: Message = {\n              id: (Date.now() + 1).toString(),\n              role: \"assistant\",\n              content: result.message || \"I need more information. Please provide additional details.\",\n              messageType: \"status\"\n            };\n            setMessages(prev => [...prev, pauseMessage]);\n            \n            // Save pause message to database\n            saveMessage.mutate({\n              notebookId: id!,\n              role: \"assistant\",\n              content: result.message || \"I need more information. Please provide additional details.\",\n              messageType: \"status\"\n            } as any);\n            \n            setAiPhase(null);\n            setProcessingStartTime(null); // Stop tracking time\n            return; // Exit early, don't add another message\n          }\n        } else {\n          // If result is null (error case), break the loop\n          console.error(\"❌ Received null result from AI, stopping generation\");\n          break;\n        }\n        \n        // Continue looping\n        console.log(\"🔄 AI workflow continuing...\");\n        await new Promise(resolve => setTimeout(resolve, 500)); // Small delay between calls\n      }\n      \n      // Clear phase indicator and persisted memory on completion\n      setAiPhase(null);\n      setPersistedAiMemory(null); // Clear memory to avoid stale context\n      setProcessingStartTime(null); // Stop tracking time\n      \n      // Completion message\n      let completionMessage = \"Document complete! ✨\";\n      \n      // Add final AI message to chat\n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: \"assistant\",\n        content: completionMessage,\n        messageType: \"status\"\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      \n      // Save completion message to database\n      saveMessage.mutate({\n        notebookId: id!,\n        role: \"assistant\",\n        content: completionMessage,\n        messageType: \"status\"\n      } as any);\n    } catch (error: any) {\n      console.error(\"❌ AI error:\", error);\n      setAiPhase(null);\n      setPersistedAiMemory(null); // Clear memory on error\n      setProcessingStartTime(null); // Stop tracking time\n      \n      let errorText = \"Sorry, I encountered an error. Please try again.\";\n      \n      // Network or fetch errors\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        errorText = \"Unable to connect to the AI service. Please check your internet connection and try again.\";\n      }\n      // Explicit error messages from the API\n      else if (error?.message) {\n        // Make error messages more user-friendly\n        if (error.message.includes('rate limit') || error.message.includes('429')) {\n          errorText = \"The AI service is currently overloaded (rate limit reached). Please wait a moment and try again, or try a simpler prompt.\";\n        } else if (error.message.includes('401') || error.message.includes('403')) {\n          errorText = \"Authentication error with the AI service. Please refresh the page and try again.\";\n        } else if (error.message.includes('404')) {\n          errorText = \"The AI service endpoint could not be found. This might be a temporary issue - please try again.\";\n        } else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('503')) {\n          errorText = \"The AI service is experiencing issues. Please try again in a moment.\";\n        } else if (error.message.includes('Invalid response')) {\n          errorText = \"Received an invalid response from the AI service. This might be due to service issues - please try again.\";\n        } else {\n          errorText = `Error: ${error.message}`;\n        }\n      }\n      \n      const errorMessage: Message = {\n        id: (Date.now() + 2).toString(),\n        role: \"assistant\",\n        content: errorText,\n        messageType: \"status\"\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      \n      // Save error message to database\n      saveMessage.mutate({\n        notebookId: id!,\n        role: \"assistant\",\n        content: errorText,\n        messageType: \"status\"\n      } as any);\n    }\n  };\n\n  if (!notebook || !id || id === \"undefined\") {\n    return <div className=\"p-12\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"h-screen flex bg-background\">\n      {!isExpanded && (\n        <div className=\"flex-1 flex flex-col overflow-hidden border-r border-border\">\n          <div className=\"border-b border-border p-4 flex items-center gap-3\">\n            <Input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              onBlur={handleTitleBlur}\n              className=\"text-xl font-semibold border-none shadow-none focus-visible:ring-0 px-0 flex-1 bg-transparent\"\n              data-testid=\"input-notebook-title\"\n            />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notebook-menu\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => {\n                  const newTitle = prompt(\"Enter new title:\", title);\n                  if (newTitle && newTitle.trim()) {\n                    setTitle(newTitle);\n                    updateTitle.mutate(newTitle);\n                  }\n                }}>\n                  <Edit2 className=\"h-4 w-4 mr-2\" />\n                  Rename\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"text-destructive\"\n                  onClick={() => {\n                    if (confirm(\"Are you sure you want to delete this notebook? This cannot be undone.\")) {\n                      fetch(`/api/notebooks/${id}`, { method: \"DELETE\" })\n                        .then(() => window.location.href = \"/\")\n                        .catch(err => console.error(\"Delete failed:\", err));\n                    }\n                  }}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <ScrollArea className=\"flex-1 p-6\">\n          <div className=\"max-w-2xl mx-auto space-y-4\">\n            {aiPhase && (\n              <div className=\"mb-4 p-4 rounded-lg bg-gradient-to-r from-primary/10 to-accent/10 border-2 border-primary/20\">\n                <div className=\"flex items-center justify-between gap-3 mb-2\">\n                  <div className=\"flex items-center gap-3\">\n                    <Sparkles className=\"h-5 w-5 text-primary animate-pulse\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">\n                        {aiPhase === \"plan\" && \"Planning your document...\"}\n                        {aiPhase === \"execute\" && \"Writing content...\"}\n                        {aiPhase === \"review\" && \"Reviewing and polishing...\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Feel free to step away - I'll keep working in the background\n                      </p>\n                    </div>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground bg-background px-2 py-1 rounded\">{elapsedTime}s</span>\n                </div>\n              </div>\n            )}\n            {groupMessages(messages).map((group, groupIndex) => {\n              if (group.type === \"activity\") {\n                const isExpanded = expandedActivityLogs.has(groupIndex);\n                return (\n                  <Card\n                    key={`activity-${groupIndex}`}\n                    className=\"p-3 bg-yellow-50 dark:bg-yellow-950/20 border-yellow-200 dark:border-yellow-900/30 cursor-pointer hover-elevate\"\n                    onClick={() => {\n                      setExpandedActivityLogs(prev => {\n                        const next = new Set(prev);\n                        if (next.has(groupIndex)) {\n                          next.delete(groupIndex);\n                        } else {\n                          next.add(groupIndex);\n                        }\n                        return next;\n                      });\n                    }}\n                    data-testid={`activity-log-${groupIndex}`}\n                  >\n                    <div className=\"flex items-center gap-2 text-sm font-medium text-yellow-700 dark:text-yellow-400\">\n                      {isExpanded ? (\n                        <ChevronDown className=\"h-4 w-4\" />\n                      ) : (\n                        <ChevronRight className=\"h-4 w-4\" />\n                      )}\n                      <span>Activity log</span>\n                      <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                        {group.messages.length} {group.messages.length === 1 ? 'message' : 'messages'}\n                      </Badge>\n                    </div>\n                    {isExpanded && (\n                      <div className=\"mt-3 space-y-2 pl-6\">\n                        {group.messages.map((message) => (\n                          <div key={message.id} className=\"text-xs text-yellow-800 dark:text-yellow-300 leading-relaxed\">\n                            {message.content}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </Card>\n                );\n              }\n\n              // Single message group\n              const message = group.messages[0];\n\n              // Completion messages (green, always visible)\n              if (message.messageType === \"completion\") {\n                return (\n                  <div key={message.id} className=\"flex gap-3\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback className=\"bg-green-600 text-white\">\n                        <Sparkles className=\"h-4 w-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <Card \n                      className=\"p-3 max-w-[80%] bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/30 cursor-pointer hover-elevate\"\n                      onClick={() => {\n                        setMessages(prev => prev.map(m => \n                          m.id === message.id ? { ...m, expanded: !m.expanded } : m\n                        ));\n                      }}\n                      data-testid={`completion-message-${message.sectionTitle}`}\n                    >\n                      <div className=\"flex items-center gap-2 text-sm font-medium text-green-700 dark:text-green-400\">\n                        <span>{message.content}</span>\n                      </div>\n                      {message.expanded && message.sectionContent && (\n                        <div className=\"mt-2 pt-2 border-t border-green-200 dark:border-green-900/30 text-xs leading-relaxed whitespace-pre-wrap text-green-800 dark:text-green-300 line-clamp-none\">\n                          {message.sectionContent}\n                        </div>\n                      )}\n                      {!message.expanded && message.sectionContent && (\n                        <div className=\"mt-1 text-xs text-green-600 dark:text-green-500\">\n                          Click to show content\n                        </div>\n                      )}\n                    </Card>\n                  </div>\n                );\n              }\n\n              // Legacy expandable system messages (keep for backwards compatibility)\n              if (message.role === \"system\" && message.isExpandable) {\n                return (\n                  <div key={message.id} className=\"flex gap-3\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback className=\"bg-green-600 text-white\">\n                        <Sparkles className=\"h-4 w-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <Card \n                      className=\"p-3 max-w-[80%] bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/30 cursor-pointer hover-elevate\"\n                      onClick={() => {\n                        setMessages(prev => prev.map(m => \n                          m.id === message.id ? { ...m, expanded: !m.expanded } : m\n                        ));\n                      }}\n                      data-testid={`system-message-${message.sectionTitle}`}\n                    >\n                      <div className=\"flex items-center gap-2 text-sm font-medium text-green-700 dark:text-green-400\">\n                        <span>{message.content}</span>\n                      </div>\n                      {message.expanded && message.sectionContent && (\n                        <div className=\"mt-2 pt-2 border-t border-green-200 dark:border-green-900/30 text-xs leading-relaxed whitespace-pre-wrap text-green-800 dark:text-green-300 line-clamp-none\">\n                          {message.sectionContent}\n                        </div>\n                      )}\n                      {!message.expanded && (\n                        <div className=\"mt-1 text-xs text-green-600 dark:text-green-500\">\n                          Click to show content\n                        </div>\n                      )}\n                    </Card>\n                  </div>\n                );\n              }\n              \n              // Regular user/assistant messages\n              return (\n                <div key={message.id} className={`flex gap-3 ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}>\n                  {message.role === \"assistant\" && (\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                        <Bot className=\"h-4 w-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                  <Card className={`p-4 max-w-[80%] ${message.role === \"user\" ? \"bg-primary text-primary-foreground\" : \"\"}`}>\n                    <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{message.content}</p>\n                  </Card>\n                  {message.role === \"user\" && (\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback>\n                        <User className=\"h-4 w-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                </div>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        <div className=\"border-t border-border p-4 pb-6\">\n          <div className=\"flex gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSend();\n                }\n              }}\n              placeholder=\"Instruction for the AI... (e.g., 'Add detailed objectives about measuring thermal conductivity')\"\n              className=\"resize-none\"\n              rows={3}\n              data-testid=\"textarea-chat-input\"\n            />\n            <Button \n              onClick={handleSend} \n              disabled={!input.trim() || generateAI.isPending}\n              size=\"icon\"\n              className=\"h-full\"\n              data-testid=\"button-send\"\n            >\n              {generateAI.isPending ? <Sparkles className=\"h-4 w-4 animate-spin\" /> : <Send className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n        </div>\n      )}\n\n      {isExpanded && (\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <div className=\"border-b border-border p-4 flex items-center justify-between gap-3\">\n            <Input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              onBlur={handleTitleBlur}\n              className=\"text-xl font-semibold border-none shadow-none focus-visible:ring-0 px-0 flex-1 bg-transparent\"\n              data-testid=\"input-notebook-title-expanded\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsExpanded(false)}\n              data-testid=\"button-collapse-document\"\n            >\n              <Minimize2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <ScrollArea className=\"flex-1 p-8\">\n            <div className=\"max-w-4xl mx-auto space-y-8\">\n              {Array.isArray(sections) && sections.map((section, index) => (\n                <Card\n                  key={section.id}\n                  className={`p-6 bg-accent/20 transition-all duration-300 ${\n                    recentlyUpdatedSections.has(section.id) ? 'animate-flash-border' : ''\n                  }`}\n                  data-testid={`section-card-${section.id}`}\n                >\n                  <h2 className=\"text-2xl font-bold mb-4\">{index + 1}. {section.title}</h2>\n                  <div className=\"text-base leading-relaxed whitespace-pre-wrap\">\n                    {section.content || \"No content yet.\"}\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n      )}\n\n      {!isExpanded && (\n        <div className=\"w-80 lg:w-96 xl:w-[28rem] 2xl:w-[32rem] p-4 bg-card overflow-auto\">\n        {currentPlan && currentPlan.variables && (\n          <Accordion type=\"single\" collapsible className=\"mb-3\" value={isContextOpen} onValueChange={setIsContextOpen}>\n            <AccordionItem value=\"context\" className=\"border rounded-lg px-2\">\n              <AccordionTrigger className=\"text-xs font-semibold hover:no-underline py-2\">\n                <div className=\"flex items-center gap-1.5\">\n                  <Sparkles className=\"h-3 w-3 text-primary\" />\n                  Context\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"space-y-2 pb-1.5 text-xs\">\n                  {/* Main Context */}\n                  <div className=\"space-y-1\">\n                    {currentPlan.variables.topic && (\n                      <div className=\"flex gap-1.5\">\n                        <span className=\"font-medium text-muted-foreground\">Topic:</span>\n                        <span className=\"text-foreground\">{currentPlan.variables.topic}</span>\n                      </div>\n                    )}\n                    {currentPlan.variables.targetLength && (\n                      <div className=\"flex gap-1.5\">\n                        <span className=\"font-medium text-muted-foreground\">Length:</span>\n                        <span className=\"text-foreground\">{currentPlan.variables.targetLength}</span>\n                      </div>\n                    )}\n                    {currentPlan.variables.documentType && (\n                      <div className=\"flex gap-1.5\">\n                        <span className=\"font-medium text-muted-foreground\">Type:</span>\n                        <span className=\"text-foreground\">{currentPlan.variables.documentType}</span>\n                      </div>\n                    )}\n                    {currentPlan.variables.tone && (\n                      <div className=\"flex gap-1.5\">\n                        <span className=\"font-medium text-muted-foreground\">Tone:</span>\n                        <span className=\"text-foreground\">{currentPlan.variables.tone}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Comments Section for less common modifiers */}\n                  {(currentPlan.variables.targetAudience || \n                    currentPlan.variables.focusAreas?.length > 0 || \n                    currentPlan.variables.comments) && (\n                    <div className=\"pt-2 border-t border-border space-y-1\">\n                      <div className=\"font-medium text-muted-foreground text-[10px] uppercase tracking-wide mb-1\">\n                        Notes\n                      </div>\n                      {currentPlan.variables.targetAudience && (\n                        <div className=\"flex gap-1.5\">\n                          <span className=\"font-medium text-muted-foreground\">Audience:</span>\n                          <span className=\"text-foreground\">{currentPlan.variables.targetAudience}</span>\n                        </div>\n                      )}\n                      {currentPlan.variables.focusAreas?.length > 0 && (\n                        <div className=\"flex gap-1.5\">\n                          <span className=\"font-medium text-muted-foreground\">Focus:</span>\n                          <span className=\"text-foreground\">{currentPlan.variables.focusAreas.join(', ')}</span>\n                        </div>\n                      )}\n                      {currentPlan.variables.comments && (\n                        <div className=\"text-muted-foreground italic\">{currentPlan.variables.comments}</div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        )}\n        \n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            <h3 className=\"font-semibold text-sm text-foreground\">Chapters</h3>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {!isContextOpen && sections.length > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\" data-testid=\"progress-indicator\">\n                {sections.filter(s => s.content && s.content.length >= 500).length}/{sections.length}\n              </Badge>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              data-testid=\"button-expand-chapters\"\n            >\n              {isExpanded ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n        <div className=\"space-y-3\">\n          {Array.isArray(sections) && sections.map((section, index) => (\n            <div key={section.id}>\n              <button\n                onClick={() => !isExpanded && setSelectedSection(section)}\n                className={`w-full text-left p-3 rounded-md ${!isExpanded ? \"hover-elevate\" : \"\"} transition-all relative ${\n                  selectedSection?.id === section.id && !isExpanded ? \"bg-accent\" : \"\"\n                } ${\n                  editingSections.has(section.id) ? \"ring-2 ring-primary animate-pulse\" : \"\"\n                } ${\n                  recentlyUpdatedSections.has(section.id) ? \"bg-primary/20 ring-1 ring-primary/50\" : \"\"\n                }`}\n                data-testid={`chapter-link-${section.title.toLowerCase()}`}\n              >\n                <div className=\"font-medium text-foreground text-sm mb-1 flex items-center gap-2\">\n                  <span className={`w-2 h-2 rounded-full ${\n                    !section.content || section.content.length < 100 \n                      ? 'bg-red-500' \n                      : section.content.length < 500 \n                      ? 'bg-yellow-500' \n                      : 'bg-green-500'\n                  }`} />\n                  {index + 1}. {section.title}\n                  {editingSections.has(section.id) && (\n                    <Sparkles className=\"h-3 w-3 text-primary animate-spin\" />\n                  )}\n                </div>\n                {!isExpanded && section.content && (\n                  <div className=\"text-xs text-muted-foreground leading-relaxed whitespace-pre-wrap line-clamp-3\">\n                    {section.content}\n                  </div>\n                )}\n              </button>\n              {isExpanded && section.content && (\n                <div className=\"pl-3 pr-2 py-2 text-sm text-foreground leading-relaxed whitespace-pre-wrap\">\n                  {section.content}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <Dialog open={!!selectedSection} onOpenChange={(open) => !open && setSelectedSection(null)}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh]\">\n            <DialogHeader>\n              <DialogTitle>{selectedSection?.title}</DialogTitle>\n              <DialogDescription>Chapter content</DialogDescription>\n            </DialogHeader>\n            <ScrollArea className=\"max-h-[60vh] pr-4\">\n              <div className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n                {selectedSection?.content || \"No content yet. Chat with the AI to add content to this chapter.\"}\n              </div>\n            </ScrollArea>\n          </DialogContent>\n        </Dialog>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":50254},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"design_guidelines.md":{"content":"# Engineering Notebook Design Guidelines\n\n## Design Approach: Design System with Productivity Focus\n\n**Selected Approach**: Design System (Material Design 3 / Fluent Design hybrid) with inspiration from **Linear** and **Notion** for productivity-focused interfaces\n\n**Justification**: This is a utility-focused productivity tool requiring clarity, consistency, and efficient information architecture. The design must support long-form technical writing while providing clear visual feedback for AI generation states.\n\n**Core Principles**:\n- Information clarity over visual flourish\n- Predictable, consistent interaction patterns\n- Strong typographic hierarchy for technical content\n- Subtle feedback for AI processing states\n\n---\n\n## Color Palette\n\n### Light Mode (Beige/Warm Theme)\n- **Background Layers**: 40 30% 96% (soft beige), 38 25% 92% (warm cream), 36 20% 88% (deeper beige)\n- **Text Colors**: 30 15% 25% (warm dark brown), 35 10% 45% (medium warm gray), 35 8% 60% (soft warm gray)\n- **Brand Primary**: 25 70% 55% (warm terracotta/coral for AI actions)\n- **Brand Accent**: 45 65% 50% (golden amber for highlights)\n- **Borders**: 38 20% 85% (subtle warm border)\n\n### Dark Mode (Warm Dark)\n- **Background Layers**: 30 15% 12% (warm charcoal), 28 12% 18% (warm dark gray), 26 10% 22% (lighter warm gray)\n- **Text Colors**: 40 25% 95% (warm off-white), 38 15% 75% (warm light gray), 36 12% 65% (medium warm gray)\n- **Brand Primary**: 25 65% 60% (soft coral for AI actions)\n- **Brand Accent**: 45 60% 55% (muted gold for highlights)\n- **Borders**: 28 12% 28% (subtle warm border)\n\n### Semantic Colors\n- **Warning**: 38 92% 50% (AI processing state)\n- **Error**: 0 84% 60% (generation failures)\n- **Info**: 199 89% 48% (AI suggestions)\n\n---\n\n## Typography\n\n**Primary Font**: 'Inter' (Google Fonts) - Clean, highly readable for UI and content\n**Monospace Font**: 'JetBrains Mono' (Google Fonts) - Code blocks and technical data\n\n### Type Scale\n- **Hero/Display**: text-4xl md:text-5xl, font-semibold (onboarding, empty states)\n- **Section Headers**: text-2xl md:text-3xl, font-semibold\n- **Notebook Titles**: text-xl md:text-2xl, font-medium\n- **Body Content**: text-base, font-normal, leading-relaxed (1.75 line height)\n- **Secondary Text**: text-sm, text-secondary\n- **Caption/Meta**: text-xs, text-tertiary\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Tailwind units of 2, 4, 6, 8, 12, 16\n- Micro spacing: p-2, gap-2 (component internals)\n- Standard spacing: p-4, gap-4, mb-6 (cards, sections)\n- Section spacing: py-8, mb-12 (major sections)\n- Page padding: p-6 md:p-8 lg:p-12\n\n**Grid System**:\n- Sidebar navigation: w-64 fixed (desktop), full-width drawer (mobile)\n- Main content area: max-w-4xl mx-auto (optimal reading width for notebooks)\n- Editor workspace: max-w-5xl (slightly wider for editing comfort)\n- Dual-pane layouts: 60/40 split (editor/preview or notebook/AI panel)\n\n---\n\n## Component Library\n\n### Navigation & Structure\n- **Top Bar**: Fixed header with app logo, notebook title, save status indicator, user profile\n- **Sidebar**: Persistent navigation with notebook list, templates, settings (collapsible on mobile)\n- **Breadcrumbs**: Show navigation path (All Notebooks > Project Name > Entry)\n\n### Core Components\n\n**Notebook Editor**:\n- Rich text editor with floating toolbar (appears on text selection)\n- Section headers with auto-numbering (Objectives, Methods, Observations, Conclusions)\n- Markdown preview toggle\n- Word/character count display\n\n**AI Generation Panel**:\n- Slide-out panel (right side, w-96 on desktop)\n- Prompt input field with multi-line support\n- Generation controls: Generate, Regenerate, Stop\n- Context indicator showing which sections AI is aware of\n- Loading states: Pulsing text shimmer during generation\n- Generated content preview with Accept/Edit/Discard actions\n\n**Template Cards**:\n- Grid layout (2 columns on tablet, 3 on desktop)\n- Template icon, name, description\n- Preview on hover (subtle elevation increase)\n- Quick start button\n\n**Notebook List**:\n- List view with notebook thumbnail (first few lines preview)\n- Metadata: Last edited, word count, completion status\n- Status badges: Draft, In Progress, Complete\n- Search and filter controls\n\n### Forms & Inputs\n- **Text Fields**: Rounded-lg borders, focus ring-2 ring-brand-primary\n- **Buttons Primary**: bg-brand-primary, rounded-lg, px-6 py-2.5, hover:brightness-110\n- **Buttons Secondary**: border-2 variant with bg-transparent\n- **Icon Buttons**: w-10 h-10, rounded-lg, subtle hover background\n\n### Feedback & States\n- **AI Processing**: Animated gradient border on generating sections\n- **Success Toast**: Slide in from top-right, auto-dismiss in 3s\n- **Empty States**: Centered icon + heading + description + CTA button\n- **Loading Skeletons**: Pulsing gray rectangles matching content structure\n\n---\n\n## Iconography\n**Library**: Heroicons (outline for navigation, solid for actions)\n- CDN: `<script src=\"https://cdn.jsdelivr.net/npm/heroicons@2.0.18/outline/index.js\"></script>`\n- Common icons: DocumentTextIcon, PencilIcon, SparklesIcon (AI), BeakerIcon (lab), ChartBarIcon (data)\n\n---\n\n## Animations (Minimal & Purposeful)\n- **Page Transitions**: Simple fade-in (150ms)\n- **Panel Slides**: Transform translate-x with 200ms ease\n- **AI Generation**: Gentle pulsing opacity on active text (50%-100%)\n- **Button Hovers**: Brightness/scale changes (duration-200)\n- **No**: Auto-playing animations, parallax effects, or distracting motion\n\n---\n\n## Images\n**Hero Section**: Yes - Single hero on landing/welcome page showing notebook interface mockup or abstract technical illustration (blueprint/schematic aesthetic). Image should be 16:9 aspect ratio, positioned as full-width background with overlay gradient for text readability.\n\n**Additional Images**:\n- Empty state illustrations: Minimal line art showing notebook concept\n- Template previews: Screenshots of formatted notebook examples\n- Onboarding graphics: Step-by-step visual guides (optional)\n\nAll images should maintain professional, technical aesthetic - think engineering diagrams, clean workspace photography, or abstract data visualization patterns.\n\n---\n\n## Responsive Behavior\n- **Mobile (< 768px)**: Single column, stacked panels, hamburger menu for navigation\n- **Tablet (768px - 1024px)**: Collapsible sidebar, single-column editor\n- **Desktop (> 1024px)**: Full dual-pane layout with persistent sidebar\n\n**Critical Mobile Optimizations**:\n- Floating action button for quick AI generation\n- Swipe gestures for panel navigation\n- Bottom sheet for AI controls instead of side panel","size_bytes":6567},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/Home.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { FileText, Plus, Clock, MoreVertical, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { Notebook } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  \n  const { data: notebooks = [] } = useQuery<Notebook[]>({\n    queryKey: [\"/api/notebooks\"],\n  });\n\n  const createNotebook = useMutation({\n    mutationFn: async (data: { title: string; emoji: string; sections: Array<{ title: string; orderIndex: string }> }) => {\n      const response = await fetch(\"/api/notebooks\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ title: data.title, emoji: data.emoji }),\n      });\n      const notebook = await response.json();\n      \n      // Create sections\n      for (const section of data.sections) {\n        await fetch(\"/api/sections\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            notebookId: notebook.id,\n            title: section.title,\n            content: \"\",\n            orderIndex: section.orderIndex,\n          }),\n        });\n      }\n      \n      return notebook;\n    },\n    onSuccess: (notebook) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\"] });\n      setLocation(`/notebook/${notebook.id}`);\n    },\n  });\n\n  const deleteNotebook = useMutation({\n    mutationFn: async (id: string) => {\n      await fetch(`/api/notebooks/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\"] });\n    },\n  });\n\n  const handleCreateNotebook = (title: string, emoji: string, sections: Array<{ title: string; orderIndex: string }>) => {\n    createNotebook.mutate({ title, emoji, sections });\n  };\n\n  const handleDeleteNotebook = (e: React.MouseEvent, id: string) => {\n    e.stopPropagation();\n    deleteNotebook.mutate(id);\n  };\n\n  return (\n    <div className=\"min-h-screen p-12\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-semibold mb-12 text-foreground\">Welcome home</h1>\n        \n        <div className=\"mb-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Recently visited\n            </h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card \n              className=\"p-6 hover-elevate cursor-pointer transition-all border-dashed flex flex-col items-center justify-center min-h-[140px]\"\n              onClick={() => handleCreateNotebook(\"Untitled Notebook\", \"\", [])}\n              data-testid=\"card-new-notebook\"\n            >\n              <Plus className=\"h-8 w-8 text-muted-foreground mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">New notebook</p>\n            </Card>\n            \n            {notebooks.map((notebook) => (\n              <Card \n                key={notebook.id}\n                className=\"p-6 hover-elevate cursor-pointer transition-all relative group\"\n                onClick={() => setLocation(`/notebook/${notebook.id}`)}\n                data-testid={`card-notebook-${notebook.id}`}\n              >\n                <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        data-testid={`button-menu-${notebook.id}`}\n                      >\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem\n                        className=\"text-destructive\"\n                        onClick={(e) => handleDeleteNotebook(e, notebook.id)}\n                        data-testid={`menu-item-delete-${notebook.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n                <FileText className=\"h-8 w-8 text-muted-foreground mb-3\" />\n                <h3 className=\"font-medium text-foreground mb-1\">{notebook.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {formatDistanceToNow(new Date(notebook.updatedAt), { addSuffix: true })}\n                </p>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5353},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/examples/NotebookEditor.tsx":{"content":"import { NotebookEditor } from \"../NotebookEditor\";\n\nexport default function NotebookEditorExample() {\n  return (\n    <div className=\"h-screen bg-background\">\n      <NotebookEditor onAIGenerate={() => console.log(\"AI generate triggered\")} />\n    </div>\n  );\n}\n","size_bytes":260},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/examples/SignIn.tsx":{"content":"import SignIn from \"../../pages/SignIn\";\n\nexport default function SignInExample() {\n  return <SignIn />;\n}\n","size_bytes":107},"replit.md":{"content":"# Notebookr - AI-Powered Engineering Notebooks\n\n## Overview\nNotebookr is a free, AI-powered engineering notebook application that enables engineers to generate technical documentation through a conversational AI interface. It features a standalone authentication system and utilizes OpenRouter AI models, with OpenAI as a fallback. The project aims to streamline technical writing, making it efficient and accessible.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Technology Stack:** React with TypeScript, Vite, Wouter for routing, TanStack Query, Radix UI primitives with shadcn/ui components, and Tailwind CSS.\n- **Design System:** Custom color palette, Inter and JetBrains Mono fonts, comprehensive component library, theme switching, and responsive design.\n- **Key Features:** Standalone username/password authentication, chat-based AI content generation, conversational AI context understanding, notebook management (create, rename, delete, emoji support), chapters navigation, template system, real-time content updates, and secure user-scoped data access.\n- **UI/UX Decisions:** Full-screen document view, real-time chat progress updates (planning, executing, reviewing, post-processing), visual feedback for section updates, dynamic variables accordion, smart progress indicators, and live section completion updates.\n- **Messaging & Interaction:** Smart message grouping with collapsible \"Activity log\" blocks for status messages, visible \"completion\" messages, one-at-a-time conversational questions for natural dialogue, and enhanced context display.\n\n### Backend Architecture\n- **Technology Stack:** Node.js with Express.js, TypeScript, Drizzle ORM (PostgreSQL), connect-pg-simple for session management, and OpenAI API integration.\n- **API Design:** RESTful API, secure authentication endpoints, protected notebook and section endpoints, AI generation endpoint, Zod for request validation, and user ownership validation.\n- **Data Models:** PostgreSQL database storing Users, Sessions, Notebooks (including `aiMemory`), Sections, Section Versions, and Messages.\n- **Development Approach:** PostgreSQL with Drizzle ORM, standalone authentication with scrypt hashing, PostgreSQL session storage, hot module replacement, custom logging, and error handling middleware.\n- **AI Streaming:** Implemented Server-Sent Events (SSE) for streaming AI responses with heartbeat events to prevent timeouts, using a `threePhaseGenerationStream` generator.\n\n### AI System\n- **Four-Phase AI Workflow:** Plan → Execute → Review → Post-Process.\n    - **Planning:** Conversational approach to understand user intent, asking open-ended and task-focused questions until clarity is achieved. Extracts variables (topic, length, tone, criteria) and creates a document plan with meaningful section names and tasks. Autonomous planning extracts explicit details and makes reasonable structural decisions, asking questions only when genuinely critical information is missing.\n    - **Execution:** Processes tasks one per call, generating/updating sections with 2-5 paragraphs minimum and descriptive chapter names. Supports precise word count targeting based on requested page counts.\n    - **Review:** Evaluates content quality and completeness.\n    - **Post-Process:** Checks and fixes content to avoid AI detection patterns.\n- **AI Memory System:** `notebook.aiMemory` stores TODO lists, document plans, and original user instructions for persistent context.\n- **Version History:** Automatic snapshots of sections before updates with restore functionality.\n- **Monetization:** Credit-based system with OpenRouter models for free users and purchased credits for faster OpenAI models. Features bulk purchase tiers and Stripe integration for payments.\n\n## External Dependencies\n\n### AI Services\n- **OpenRouter Multi-Model Fallback System:** Primary AI provider (e.g., Llama-3.3-70B, Gemini-2.0-Flash, Claude-3.5-Sonnet) with API key rotation and graceful degradation.\n- **OpenAI API:** Fallback AI provider.\n\n### Database\n- **PostgreSQL:** Primary data store, connected via Drizzle ORM and Neon serverless driver. Used for session storage with `connect-pg-simple`.\n\n### Payment Gateway\n- **Stripe:** For credit purchases and webhook integration.\n\n### Third-Party UI Libraries\n- **Radix UI:** Accessible, unstyled UI primitives.\n- **shadcn/ui:** Pre-built components based on Radix UI.\n- **Lucide React:** Icon library.\n- **cmdk:** Command palette.\n- **Embla Carousel:** Carousel/slider functionality.\n- **React Day Picker:** Calendar/date picker.\n- **Recharts:** Charting library.\n\n### Fonts\n- **Google Fonts:** Inter (UI/content) and JetBrains Mono (code blocks).","size_bytes":4742},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertNotebookSchema, insertSectionSchema, insertMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { generateWithFallback } from \"./ai-service\";\nimport Stripe from \"stripe\";\n\n// Initialize Stripe only if secret is available\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2025-09-30.clover\",\n    })\n  : null;\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication - now includes /api/register, /api/login, /api/logout, /api/user\n  setupAuth(app);\n\n  // Notebooks (protected)\n  app.get(\"/api/notebooks\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const notebooks = await storage.getNotebooks(userId);\n    res.json(notebooks);\n  });\n\n  app.get(\"/api/notebooks/:id\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const notebook = await storage.getNotebook(req.params.id);\n    if (!notebook) {\n      return res.status(404).json({ error: \"Notebook not found\" });\n    }\n    if (notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    res.json(notebook);\n  });\n\n  app.post(\"/api/notebooks\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const result = insertNotebookSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n    const notebook = await storage.createNotebook({ ...result.data, userId });\n    res.json(notebook);\n  });\n\n  app.patch(\"/api/notebooks/:id\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const notebook = await storage.getNotebook(req.params.id);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const result = insertNotebookSchema.partial().safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n    const updated = await storage.updateNotebook(req.params.id, result.data);\n    res.json(updated);\n  });\n\n  app.delete(\"/api/notebooks/:id\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const notebook = await storage.getNotebook(req.params.id);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    await storage.deleteNotebook(req.params.id);\n    res.status(204).send();\n  });\n\n  // Sections\n  app.get(\"/api/notebooks/:notebookId/sections\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const notebook = await storage.getNotebook(req.params.notebookId);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const sections = await storage.getSectionsByNotebookId(req.params.notebookId);\n    res.json(sections);\n  });\n\n  app.post(\"/api/sections\", isAuthenticated, async (req: any, res) => {\n    const result = insertSectionSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n    const notebook = await storage.getNotebook(result.data.notebookId);\n    const userId = req.user.id;\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const section = await storage.createSection(result.data);\n    res.json(section);\n  });\n\n  app.patch(\"/api/sections/:id\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const section = await storage.getSection(req.params.id);\n    if (!section) {\n      return res.status(404).json({ error: \"Section not found\" });\n    }\n    const notebook = await storage.getNotebook(section.notebookId);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const schema = z.object({ content: z.string() });\n    const result = schema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n    const updated = await storage.updateSection(req.params.id, result.data.content);\n    res.json(updated);\n  });\n\n  // Section Version History\n  app.get(\"/api/sections/:id/versions\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const section = await storage.getSection(req.params.id);\n    if (!section) {\n      return res.status(404).json({ error: \"Section not found\" });\n    }\n    const notebook = await storage.getNotebook(section.notebookId);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const versions = await storage.getSectionVersions(req.params.id);\n    res.json(versions);\n  });\n\n  app.post(\"/api/sections/:id/restore/:versionId\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const section = await storage.getSection(req.params.id);\n    if (!section) {\n      return res.status(404).json({ error: \"Section not found\" });\n    }\n    const notebook = await storage.getNotebook(section.notebookId);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const restored = await storage.restoreSectionVersion(req.params.id, req.params.versionId);\n    if (!restored) {\n      return res.status(404).json({ error: \"Version not found\" });\n    }\n    res.json(restored);\n  });\n\n  // Messages (chat history)\n  app.get(\"/api/notebooks/:notebookId/messages\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user.id;\n    const notebook = await storage.getNotebook(req.params.notebookId);\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const messages = await storage.getMessagesByNotebookId(req.params.notebookId);\n    res.json(messages);\n  });\n\n  app.post(\"/api/messages\", isAuthenticated, async (req: any, res) => {\n    const result = insertMessageSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n    const notebook = await storage.getNotebook(result.data.notebookId);\n    const userId = req.user.id;\n    if (!notebook || notebook.userId !== userId) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    const message = await storage.createMessage(result.data);\n    res.json(message);\n  });\n\n  // AI Generation - Streaming endpoint with SSE\n  app.post(\"/api/ai/generate/stream\", isAuthenticated, async (req: any, res) => {\n    const schema = z.object({\n      instruction: z.string(),\n      notebookId: z.string(),\n      sections: z.array(z.object({\n        id: z.string(),\n        title: z.string(),\n        content: z.string(),\n      })),\n      aiMemory: z.any().optional(),\n    });\n\n    const result = schema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n\n    const { instruction, notebookId, sections, aiMemory } = result.data;\n    const userId = req.user.id;\n\n    try {\n      // Get notebook to check ownership\n      const notebook = await storage.getNotebook(notebookId);\n      if (!notebook || notebook.userId !== userId) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      // Set up SSE headers\n      res.setHeader('Content-Type', 'text/event-stream');\n      res.setHeader('Cache-Control', 'no-cache');\n      res.setHeader('Connection', 'keep-alive');\n      res.flushHeaders();\n\n      // Import streaming function\n      const { threePhaseGenerationStream } = await import(\"./ai-service\");\n\n      // Start streaming generation\n      for await (const event of threePhaseGenerationStream({\n        instruction,\n        sections,\n        aiMemory: aiMemory || notebook.aiMemory,\n        notebookId\n      })) {\n        // Send event to client\n        res.write(`data: ${JSON.stringify(event)}\\n\\n`);\n      }\n\n      // Close the stream\n      res.write('data: {\"type\":\"close\"}\\n\\n');\n      res.end();\n    } catch (error) {\n      console.error(\"❌ AI streaming error:\", error);\n      res.write(`data: ${JSON.stringify({ type: \"error\", error: \"Failed to generate content\" })}\\n\\n`);\n      res.end();\n    }\n  });\n\n  // AI Generation - Three-phase workflow with planning (non-streaming for backward compatibility)\n  app.post(\"/api/ai/generate\", isAuthenticated, async (req: any, res) => {\n    const schema = z.object({\n      instruction: z.string(),\n      notebookId: z.string(),\n      sections: z.array(z.object({\n        id: z.string(),\n        title: z.string(),\n        content: z.string(),\n      })),\n      aiMemory: z.any().optional(),\n    });\n\n    const result = schema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n\n    const { instruction, notebookId, sections, aiMemory } = result.data;\n    const userId = req.user.id;\n\n    try {\n      // Get notebook to check ownership and retrieve AI memory\n      const notebook = await storage.getNotebook(notebookId);\n      if (!notebook || notebook.userId !== userId) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      // Use three-phase generation - prefer passed aiMemory over stored\n      const threePhaseResult = await import(\"./ai-service\").then(m => \n        m.threePhaseGeneration({\n          instruction,\n          sections,\n          aiMemory: aiMemory || notebook.aiMemory,\n          notebookId\n        })\n      );\n\n      // Update notebook AI memory\n      await storage.updateNotebookAiMemory(notebookId, threePhaseResult.aiMemory);\n\n      // Return full response with all fields the frontend needs\n      res.json({\n        actions: threePhaseResult.actions,\n        message: threePhaseResult.message,\n        phase: threePhaseResult.phase,\n        confidence: threePhaseResult.confidence,\n        plan: threePhaseResult.plan,\n        shouldContinue: threePhaseResult.shouldContinue,\n        isComplete: threePhaseResult.isComplete,\n        aiMemory: threePhaseResult.aiMemory,\n        suggestedTitle: threePhaseResult.suggestedTitle\n      });\n    } catch (error) {\n      console.error(\"❌ AI generation error (full details):\", error);\n      console.error(\"Error stack:\", (error as Error)?.stack);\n      res.status(500).json({ error: \"Failed to generate content\" });\n    }\n  });\n\n  // Stripe: Create checkout session for credit packages\n  app.post(\"/api/stripe/create-checkout\", isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ error: \"Stripe is not configured\" });\n    }\n\n    try {\n      const schema = z.object({\n        package: z.enum([\"5\", \"10\", \"25\", \"50\"]),\n      });\n      \n      const result = schema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: result.error });\n      }\n\n      const { package: pkg } = result.data;\n      \n      // Credit packages with bonuses\n      const packages: Record<string, { price: number; credits: number; name: string }> = {\n        \"5\": { price: 500, credits: 5000, name: \"Starter - 5,000 credits\" },\n        \"10\": { price: 1000, credits: 11000, name: \"Popular - 11,000 credits (+10% bonus)\" },\n        \"25\": { price: 2500, credits: 30000, name: \"Pro - 30,000 credits (+20% bonus)\" },\n        \"50\": { price: 5000, credits: 65000, name: \"Best Value - 65,000 credits (+30% bonus)\" },\n      };\n\n      const selectedPackage = packages[pkg];\n      \n      // Construct proper URLs with scheme\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n        : \"http://localhost:5000\";\n      \n      const session = await stripe.checkout.sessions.create({\n        payment_method_types: [\"card\"],\n        line_items: [\n          {\n            price_data: {\n              currency: \"usd\",\n              product_data: {\n                name: selectedPackage.name,\n                description: `Purchase ${selectedPackage.credits.toLocaleString()} credits for Notebookr premium AI features`,\n              },\n              unit_amount: selectedPackage.price,\n            },\n            quantity: 1,\n          },\n        ],\n        mode: \"payment\",\n        success_url: `${baseUrl}/settings?payment=success`,\n        cancel_url: `${baseUrl}/settings?payment=cancelled`,\n        metadata: {\n          userId: req.user.id,\n          credits: selectedPackage.credits.toString(),\n          package: pkg,\n        },\n      });\n\n      res.json({ url: session.url });\n    } catch (error: any) {\n      console.error(\"Stripe checkout error:\", error);\n      res.status(500).json({ error: \"Failed to create checkout session\" });\n    }\n  });\n\n  // Stripe: Webhook to handle successful payments\n  app.post(\"/api/stripe/webhook\", async (req, res) => {\n    if (!stripe) {\n      return res.status(503).json({ error: \"Stripe is not configured\" });\n    }\n\n    const sig = req.headers[\"stripe-signature\"];\n    \n    if (!sig) {\n      return res.status(400).send(\"Missing stripe-signature header\");\n    }\n\n    let event;\n    try {\n      event = stripe.webhooks.constructEvent(\n        req.body,\n        sig,\n        process.env.STRIPE_WEBHOOK_SECRET || \"\"\n      );\n    } catch (err: any) {\n      console.error(\"Webhook signature verification failed:\", err.message);\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    if (event.type === \"checkout.session.completed\") {\n      const session = event.data.object as Stripe.Checkout.Session;\n      const userId = session.metadata?.userId;\n      const credits = parseInt(session.metadata?.credits || \"0\");\n\n      if (userId && credits > 0) {\n        try {\n          await storage.addCredits(userId, credits, session.id, `Purchased ${session.metadata?.package} package`);\n          console.log(`✅ Added ${credits} credits to user ${userId}`);\n        } catch (error) {\n          console.error(\"Error adding credits:\", error);\n        }\n      }\n    }\n\n    res.json({ received: true });\n  });\n\n  // User: Get current user's credits\n  app.get(\"/api/user/credits\", isAuthenticated, async (req: any, res) => {\n    const user = await storage.getUserById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    res.json({ credits: user.credits, selectedAiModel: user.selectedAiModel });\n  });\n\n  // User: Update AI model selection\n  app.patch(\"/api/user/ai-model\", isAuthenticated, async (req: any, res) => {\n    const schema = z.object({\n      model: z.enum([\"free\", \"fast\", \"ultra\"]),\n    });\n    \n    const result = schema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error });\n    }\n\n    const { model } = result.data;\n    const user = await storage.getUserById(req.user.id);\n    \n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    // Prevent selecting paid models without credits\n    if ((model === \"fast\" || model === \"ultra\") && user.credits <= 0) {\n      return res.status(403).json({ error: \"Insufficient credits for premium models\" });\n    }\n\n    await storage.updateUserAiModel(req.user.id, model);\n    res.json({ success: true, model });\n  });\n\n  // User: Get transaction history\n  app.get(\"/api/user/transactions\", isAuthenticated, async (req: any, res) => {\n    const transactions = await storage.getUserTransactions(req.user.id);\n    res.json(transactions);\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":15727},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { FileText } from \"lucide-react\";\nimport heroImage from \"@assets/stock_images/technical_blueprint__e470fe50.jpg\";\n\nexport function HeroSection() {\n  return (\n    <div className=\"relative min-h-[600px] flex items-center justify-center overflow-hidden\">\n      <div \n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-background/95 via-background/90 to-background/80\" />\n      \n      <div className=\"relative z-10 max-w-3xl mx-auto px-6 py-24 text-center\">\n        <h1 className=\"text-5xl md:text-6xl font-semibold mb-6 text-foreground\">\n          Engineering Notebooks,\n          <br />\n          <span className=\"text-primary\">Powered by AI</span>\n        </h1>\n        \n        <p className=\"text-xl text-muted-foreground mb-12 max-w-xl mx-auto leading-relaxed\">\n          Create beautiful technical documentation with AI assistance\n        </p>\n        \n        <Button \n          size=\"lg\" \n          className=\"gap-2 h-14 px-8 text-base rounded-full\"\n          data-testid=\"button-get-started\"\n        >\n          <FileText className=\"h-5 w-5\" />\n          Start Writing\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1312},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/hooks/useAuth.ts":{"content":"// Based on blueprint:javascript_auth_all_persistance\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { User, InsertUser } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport function useAuth() {\n  const { toast } = useToast();\n  \n  const { data: user, error, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    staleTime: 1000 * 60 * 5,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    user: user === null ? null : user,\n    isLoading,\n    isAuthenticated: !!user && user !== null,\n    error,\n    loginMutation,\n    registerMutation,\n    logoutMutation,\n  };\n}\n","size_bytes":2056},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 40 30% 96%;\n  --foreground: 30 15% 25%;\n  --border: 38 20% 85%;\n\n  --card: 38 25% 92%;\n  --card-foreground: 30 15% 25%;\n  --card-border: 38 20% 88%;\n\n  --sidebar: 36 20% 88%;\n  --sidebar-foreground: 30 15% 25%;\n  --sidebar-border: 38 20% 82%;\n\n  --sidebar-primary: 25 70% 55%;\n  --sidebar-primary-foreground: 40 30% 96%;\n\n  --sidebar-accent: 38 25% 82%;\n  --sidebar-accent-foreground: 30 15% 25%;\n\n  --sidebar-ring: 25 70% 55%;\n\n  --popover: 40 28% 94%;\n  --popover-foreground: 30 15% 25%;\n  --popover-border: 38 20% 86%;\n\n  --primary: 25 70% 55%;\n  --primary-foreground: 40 30% 96%;\n\n  --secondary: 38 20% 88%;\n  --secondary-foreground: 30 15% 25%;\n\n  --muted: 38 18% 90%;\n  --muted-foreground: 35 10% 45%;\n\n  --accent: 45 65% 50%;\n  --accent-foreground: 30 15% 25%;\n\n  --destructive: 0 72% 55%;\n  --destructive-foreground: 40 30% 96%;\n\n  --input: 38 20% 78%;\n  --ring: 25 70% 55%;\n\n  --chart-1: 221 83% 53%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 199 89% 48%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 270 70% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 13% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 13% 13% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 13% 13% / 0.07), 0px 1px 2px -1px hsl(220 13% 13% / 0.06);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 13% / 0.08), 0px 1px 2px -1px hsl(220 13% 13% / 0.07);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 13% / 0.08), 0px 2px 4px -2px hsl(220 13% 13% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 13% / 0.08), 0px 4px 6px -4px hsl(220 13% 13% / 0.06);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 13% / 0.08), 0px 8px 10px -6px hsl(220 13% 13% / 0.06);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 13% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 30 15% 12%;\n  --foreground: 40 25% 95%;\n  --border: 28 12% 28%;\n\n  --card: 28 12% 18%;\n  --card-foreground: 40 25% 95%;\n  --card-border: 28 12% 24%;\n\n  --sidebar: 26 10% 22%;\n  --sidebar-foreground: 40 25% 95%;\n  --sidebar-border: 28 12% 28%;\n\n  --sidebar-primary: 25 65% 60%;\n  --sidebar-primary-foreground: 40 25% 95%;\n\n  --sidebar-accent: 28 12% 28%;\n  --sidebar-accent-foreground: 40 25% 95%;\n\n  --sidebar-ring: 25 65% 60%;\n\n  --popover: 28 12% 20%;\n  --popover-foreground: 40 25% 95%;\n  --popover-border: 28 12% 26%;\n\n  --primary: 25 65% 60%;\n  --primary-foreground: 40 25% 95%;\n\n  --secondary: 28 12% 24%;\n  --secondary-foreground: 40 25% 95%;\n\n  --muted: 28 10% 26%;\n  --muted-foreground: 38 15% 75%;\n\n  --accent: 45 60% 55%;\n  --accent-foreground: 30 15% 12%;\n\n  --destructive: 0 68% 58%;\n  --destructive-foreground: 40 25% 95%;\n\n  --input: 28 12% 32%;\n  --ring: 25 65% 60%;\n\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 199 89% 48%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 270 70% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.3);\n  --shadow-xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.35);\n  --shadow-sm: 0px 1px 3px 0px hsl(222 47% 11% / 0.4), 0px 1px 2px -1px hsl(222 47% 11% / 0.35);\n  --shadow: 0px 1px 3px 0px hsl(222 47% 11% / 0.45), 0px 1px 2px -1px hsl(222 47% 11% / 0.4);\n  --shadow-md: 0px 4px 6px -1px hsl(222 47% 11% / 0.5), 0px 2px 4px -2px hsl(222 47% 11% / 0.4);\n  --shadow-lg: 0px 10px 15px -3px hsl(222 47% 11% / 0.55), 0px 4px 6px -4px hsl(222 47% 11% / 0.45);\n  --shadow-xl: 0px 20px 25px -5px hsl(222 47% 11% / 0.6), 0px 8px 10px -6px hsl(222 47% 11% / 0.5);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 47% 11% / 0.7);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Flash animation for section updates */\n  @keyframes flash-border {\n    0%, 100% {\n      box-shadow: 0 0 0 0 transparent;\n    }\n    50% {\n      box-shadow: 0 0 0 3px hsl(var(--primary) / 0.4);\n    }\n  }\n\n  .animate-flash-border {\n    animation: flash-border 1s ease-in-out;\n  }\n}","size_bytes":11538},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, index, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for standalone auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  credits: integer(\"credits\").notNull().default(0),\n  selectedAiModel: varchar(\"selected_ai_model\").notNull().default(\"free\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const notebooks = pgTable(\"notebooks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  emoji: text(\"emoji\").notNull().default(\"📝\"),\n  documentType: text(\"document_type\"),\n  aiMemory: jsonb(\"ai_memory\").default({}),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const sections = pgTable(\"sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  notebookId: varchar(\"notebook_id\").notNull().references(() => notebooks.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull().default(\"\"),\n  orderIndex: text(\"order_index\").notNull(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  notebookId: varchar(\"notebook_id\").notNull().references(() => notebooks.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\").notNull(), // \"user\", \"assistant\", or \"system\"\n  content: text(\"content\").notNull(),\n  messageType: varchar(\"message_type\"), // \"status\" (yellow, collapsible) or \"completion\" (green, always visible)\n  sectionTitle: text(\"section_title\"), // For section completion messages\n  isExpandable: varchar(\"is_expandable\"), // \"true\" or null - for section completion messages\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const sectionVersions = pgTable(\"section_versions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\").notNull(), // \"purchase\" | \"deduction\"\n  amount: integer(\"amount\").notNull(),\n  stripePaymentId: varchar(\"stripe_payment_id\"),\n  description: text(\"description\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertNotebookSchema = createInsertSchema(notebooks).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSectionSchema = createInsertSchema(sections).omit({\n  id: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// User schemas for authentication\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  email: z.string().optional().nullable(),\n  firstName: z.string().optional().nullable(),\n  lastName: z.string().optional().nullable(),\n  profileImageUrl: z.string().optional().nullable(),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertNotebook = z.infer<typeof insertNotebookSchema>;\nexport type Notebook = typeof notebooks.$inferSelect;\nexport type InsertSection = z.infer<typeof insertSectionSchema>;\nexport type Section = typeof sections.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type SectionVersion = typeof sectionVersions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n","size_bytes":4916},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/NotebookEditor.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Save, Download, Sparkles } from \"lucide-react\";\n\ninterface NotebookEditorProps {\n  onAIGenerate?: () => void;\n}\n\nexport function NotebookEditor({ onAIGenerate }: NotebookEditorProps) {\n  const [title, setTitle] = useState(\"Untitled Notebook\");\n  const [sections, setSections] = useState([\n    { id: 1, title: \"Objectives\", content: \"\" },\n    { id: 2, title: \"Methods\", content: \"\" },\n    { id: 3, title: \"Observations\", content: \"\" },\n    { id: 4, title: \"Conclusions\", content: \"\" },\n  ]);\n\n  const updateSection = (id: number, content: string) => {\n    setSections(sections.map(s => s.id === id ? { ...s, content } : s));\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"border-b border-border p-4 flex items-center justify-between gap-4 flex-wrap\">\n        <Input\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"text-xl font-semibold border-none shadow-none focus-visible:ring-0 px-0 max-w-md\"\n          data-testid=\"input-notebook-title\"\n        />\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-xs text-muted-foreground\">Auto-saved</span>\n          <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\" data-testid=\"button-save\">\n            <Save className=\"h-4 w-4\" />\n            Save\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\" data-testid=\"button-export\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {sections.map((section, index) => (\n            <Card key={section.id} className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold text-foreground\">\n                  {index + 1}. {section.title}\n                </h2>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"gap-2\"\n                  onClick={onAIGenerate}\n                  data-testid={`button-ai-generate-${section.title.toLowerCase()}`}\n                >\n                  <Sparkles className=\"h-4 w-4\" />\n                  AI Generate\n                </Button>\n              </div>\n              <Textarea\n                placeholder={`Write your ${section.title.toLowerCase()} here or use AI to generate...`}\n                value={section.content}\n                onChange={(e) => updateSection(section.id, e.target.value)}\n                className=\"min-h-[200px] resize-none text-base leading-relaxed\"\n                data-testid={`textarea-${section.title.toLowerCase()}`}\n              />\n              <div className=\"mt-2 text-xs text-muted-foreground\">\n                {section.content.length} characters\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3210},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"server/auth.ts":{"content":"// Based on blueprint:javascript_auth_all_persistance\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\n// Helper to sanitize user objects - remove password before sending to frontend\nfunction sanitizeUser(user: SelectUser) {\n  const { password, ...sanitized } = user;\n  return sanitized;\n}\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(sanitizeUser(user));\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(sanitizeUser(req.user!));\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.json(null);\n    res.json(sanitizeUser(req.user!));\n  });\n}\n\n// Middleware to protect routes\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}\n","size_bytes":3301},"client/src/lib/protected-route.tsx":{"content":"// Based on blueprint:javascript_auth_all_persistance\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":759},"client/src/pages/Auth.tsx":{"content":"// Based on blueprint:javascript_auth_all_persistance\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, Sparkles, BookOpen, Zap } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = insertUserSchema.pick({ \n  username: true, \n  password: true\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Auth() {\n  const { user, isLoading, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { username: \"\", password: \"\" },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: { \n      username: \"\", \n      password: \"\"\n    },\n  });\n\n  // Redirect if already logged in (after all hooks)\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen grid lg:grid-cols-2\">\n      {/* Left side - Auth forms */}\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center space-y-2\">\n            <h1 className=\"text-4xl font-bold\">Welcome to Notebookr</h1>\n            <p className=\"text-muted-foreground\">AI-powered engineering notebooks</p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sign in to your account</CardTitle>\n                  <CardDescription>Enter your credentials to access your notebooks</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        data-testid=\"input-login-username\"\n                        {...loginForm.register(\"username\")}\n                        placeholder=\"Enter username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">{loginForm.formState.errors.username.message}</p>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        data-testid=\"input-login-password\"\n                        {...loginForm.register(\"password\")}\n                        placeholder=\"Enter password\"\n                      />\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">{loginForm.formState.errors.password.message}</p>\n                      )}\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login-submit\"\n                    >\n                      {loginMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Sign In\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create an account</CardTitle>\n                  <CardDescription>Get started with your free account</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        data-testid=\"input-register-username\"\n                        {...registerForm.register(\"username\")}\n                        placeholder=\"Choose a username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">{registerForm.formState.errors.username.message}</p>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        data-testid=\"input-register-password\"\n                        {...registerForm.register(\"password\")}\n                        placeholder=\"Create a password\"\n                      />\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">{registerForm.formState.errors.password.message}</p>\n                      )}\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register-submit\"\n                    >\n                      {registerMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Create Account\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero section */}\n      <div className=\"hidden lg:flex items-center justify-center bg-gradient-to-br from-primary/10 to-accent/20 p-12\">\n        <div className=\"max-w-lg space-y-8 text-center\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-5xl font-bold\">\n              Write smarter with AI\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Have a conversation with AI and watch it write professional engineering documentation for you\n            </p>\n          </div>\n\n          <div className=\"grid gap-6\">\n            <div className=\"flex items-start gap-4 text-left\">\n              <div className=\"h-12 w-12 rounded-xl bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <Sparkles className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">AI-Powered Writing</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Simply chat with AI and it generates structured technical content\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-4 text-left\">\n              <div className=\"h-12 w-12 rounded-xl bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <BookOpen className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Auto-Organized</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Content automatically flows into the right sections\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-4 text-left\">\n              <div className=\"h-12 w-12 rounded-xl bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <Zap className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Lightning Fast</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Create lab reports, design docs, and project logs in minutes\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9384},"server/ai-service.ts":{"content":"import OpenAI from \"openai\";\n\n// OpenRouter text models (free)\nconst TEXT_MODELS = [\n  \"alibaba/tongyi-deepresearch-30b-a3b:free\",\n  \"meta-llama/llama-3.3-8b-instruct:free\",\n  \"nvidia/nemotron-nano-9b-v2:free\",\n  \"meta-llama/llama-4-maverick:free\",\n  \"meta-llama/llama-3.2-3b-instruct:free\",\n  \"tngtech/deepseek-r1t2-chimera:free\",\n  \"z-ai/glm-4.5-air:free\",\n  \"tngtech/deepseek-r1t-chimera:free\",\n  \"deepseek/deepseek-chat-v3-0324:free\",\n];\n\n// OpenRouter API keys\nconst OPENROUTER_KEYS = [\n  process.env.OPENROUTER_KEY1,\n  process.env.OPENROUTER_KEY2,\n  process.env.OPENROUTER_KEY3,\n].filter(Boolean) as string[];\n\n// OpenAI fallback client\nconst openaiClient = new OpenAI({\n  apiKey: process.env.AI_INTEGRATIONS_OPENAI_API_KEY,\n  baseURL: process.env.AI_INTEGRATIONS_OPENAI_BASE_URL,\n});\n\ninterface AIRequest {\n  messages: Array<{ role: string; content: string }>;\n  temperature?: number;\n  max_tokens?: number;\n}\n\ninterface AIResponse {\n  content: string;\n  model: string;\n  provider: \"openrouter\" | \"openai\";\n}\n\ntype StreamChunk = {\n  type: \"chunk\";\n  content: string;\n} | {\n  type: \"done\";\n  fullContent: string;\n  model: string;\n  provider: \"openrouter\" | \"openai\";\n} | {\n  type: \"error\";\n  error: string;\n};\n\n/**\n * Fix literal newlines in JSON strings by walking character-by-character\n * and properly handling escape sequences. This handles cases where AI\n * returns JSON with actual newlines instead of \\n escape sequences.\n */\nfunction fixJsonNewlines(jsonStr: string): string {\n  const result: string[] = [];\n  let inString = false;\n  let escaped = false;\n  \n  for (let i = 0; i < jsonStr.length; i++) {\n    const char = jsonStr[i];\n    \n    // Track if we're inside a string\n    if (char === '\"' && !escaped) {\n      inString = !inString;\n      result.push(char);\n      escaped = false;\n      continue;\n    }\n    \n    // If we see a backslash, next char is escaped\n    if (char === '\\\\' && inString && !escaped) {\n      escaped = true;\n      result.push(char);\n      continue;\n    }\n    \n    // If we're in a string and see a literal newline, escape it\n    if (inString && !escaped) {\n      if (char === '\\n') {\n        result.push('\\\\n');\n        escaped = false;\n        continue;\n      } else if (char === '\\r') {\n        // Skip \\r (will be handled as part of \\r\\n or ignored)\n        const nextChar = i + 1 < jsonStr.length ? jsonStr[i + 1] : '';\n        if (nextChar !== '\\n') {\n          result.push('\\\\r');\n        }\n        escaped = false;\n        continue;\n      }\n    }\n    \n    // Regular character\n    result.push(char);\n    escaped = false;\n  }\n  \n  return result.join('');\n}\n\n// Streaming version of AI generation\nexport async function* generateWithFallbackStream(\n  request: AIRequest\n): AsyncGenerator<StreamChunk> {\n  console.log(\"🤖 Starting AI streaming with fallback system...\");\n\n  // Try OpenRouter with all combinations\n  for (let keyIndex = 0; keyIndex < OPENROUTER_KEYS.length; keyIndex++) {\n    const apiKey = OPENROUTER_KEYS[keyIndex];\n    console.log(`🔑 Trying OpenRouter key ${keyIndex + 1} (streaming)...`);\n\n    for (let modelIndex = 0; modelIndex < TEXT_MODELS.length; modelIndex++) {\n      const model = TEXT_MODELS[modelIndex];\n      \n      try {\n        console.log(`  📡 Attempting streaming model: ${model}`);\n        \n        const openrouter = new OpenAI({\n          apiKey,\n          baseURL: \"https://openrouter.ai/api/v1\",\n        });\n\n        const stream = await openrouter.chat.completions.create({\n          model,\n          messages: request.messages as any,\n          temperature: request.temperature ?? 0.7,\n          max_tokens: request.max_tokens ?? 2000,\n          stream: true,\n        });\n\n        let fullContent = \"\";\n        let hasContent = false;\n\n        for await (const chunk of stream) {\n          const content = chunk.choices[0]?.delta?.content || \"\";\n          if (content) {\n            hasContent = true;\n            fullContent += content;\n            yield { type: \"chunk\", content };\n          }\n        }\n        \n        if (hasContent) {\n          console.log(`✅ Streaming success with ${model} (key ${keyIndex + 1})`);\n          yield { \n            type: \"done\", \n            fullContent, \n            model, \n            provider: \"openrouter\" \n          };\n          return;\n        }\n      } catch (error: any) {\n        console.warn(`  ⚠️ Failed streaming ${model}: ${error.message}`);\n        // Continue to next model\n      }\n    }\n  }\n\n  // All OpenRouter attempts failed, use OpenAI fallback\n  console.log(\"⚠️ All OpenRouter streaming failed, using OpenAI fallback...\");\n  \n  try {\n    const stream = await openaiClient.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: request.messages as any,\n      temperature: request.temperature ?? 0.7,\n      max_tokens: request.max_tokens ?? 2000,\n      stream: true,\n    });\n\n    let fullContent = \"\";\n    for await (const chunk of stream) {\n      const content = chunk.choices[0]?.delta?.content || \"\";\n      if (content) {\n        fullContent += content;\n        yield { type: \"chunk\", content };\n      }\n    }\n    \n    console.log(\"✅ OpenAI streaming successful\");\n    yield { \n      type: \"done\", \n      fullContent, \n      model: \"gpt-4o-mini\", \n      provider: \"openai\" \n    };\n  } catch (error: any) {\n    console.error(\"❌ OpenAI streaming fallback failed:\", error.message);\n    yield { type: \"error\", error: \"All AI providers failed\" };\n  }\n}\n\n// Non-streaming version (kept for backward compatibility)\nexport async function generateWithFallback(\n  request: AIRequest\n): Promise<AIResponse> {\n  console.log(\"🤖 Starting AI generation with fallback system...\");\n\n  // Try OpenRouter with all combinations\n  for (let keyIndex = 0; keyIndex < OPENROUTER_KEYS.length; keyIndex++) {\n    const apiKey = OPENROUTER_KEYS[keyIndex];\n    console.log(`🔑 Trying OpenRouter key ${keyIndex + 1}...`);\n\n    for (let modelIndex = 0; modelIndex < TEXT_MODELS.length; modelIndex++) {\n      const model = TEXT_MODELS[modelIndex];\n      \n      try {\n        console.log(`  📡 Attempting model: ${model}`);\n        \n        const openrouter = new OpenAI({\n          apiKey,\n          baseURL: \"https://openrouter.ai/api/v1\",\n        });\n\n        const completion = await openrouter.chat.completions.create({\n          model,\n          messages: request.messages as any,\n          temperature: request.temperature ?? 0.7,\n          max_tokens: request.max_tokens ?? 2000,\n        });\n\n        const content = completion.choices[0]?.message?.content || \"\";\n        \n        if (content) {\n          console.log(`✅ Success with ${model} (key ${keyIndex + 1})`);\n          return {\n            content,\n            model,\n            provider: \"openrouter\",\n          };\n        }\n      } catch (error: any) {\n        console.warn(`  ⚠️ Failed ${model}: ${error.message}`);\n        // Continue to next model\n      }\n    }\n  }\n\n  // All OpenRouter attempts failed, use OpenAI fallback\n  console.log(\"⚠️ All OpenRouter attempts failed, using OpenAI fallback...\");\n  \n  try {\n    const completion = await openaiClient.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: request.messages as any,\n      temperature: request.temperature ?? 0.7,\n      max_tokens: request.max_tokens ?? 2000,\n    });\n\n    const content = completion.choices[0]?.message?.content || \"\";\n    console.log(\"✅ OpenAI fallback successful\");\n    \n    return {\n      content,\n      model: \"gpt-4o-mini\",\n      provider: \"openai\",\n    };\n  } catch (error: any) {\n    console.error(\"❌ OpenAI fallback failed:\", error.message);\n    throw new Error(\"All AI providers failed\");\n  }\n}\n\ninterface ThreePhaseRequest {\n  instruction: string;\n  sections: Array<{ id: string; title: string; content: string }>;\n  aiMemory?: any;\n  notebookId: string;\n  iterationCount?: number;\n}\n\ninterface ThreePhaseResponse {\n  phase: \"plan\" | \"create\" | \"execute\" | \"review\" | \"postprocess\" | \"finalreview\";\n  actions: Array<{\n    type: \"update\" | \"create\";\n    sectionId: string;\n    content: string;\n  }>;\n  message: string;\n  progressMessage?: string; // Optional progress message for execution phase\n  aiMemory: any;\n  confidence: \"high\" | \"medium\" | \"low\";\n  suggestedTitle?: string;\n  isComplete?: boolean;\n  shouldContinue?: boolean;\n  plan?: any;\n}\n\n// Streaming event types\ntype ThreePhaseStreamEvent = \n  | { type: \"content_chunk\"; content: string }\n  | { type: \"phase_update\"; phase: string; message: string }\n  | { type: \"action\"; action: any }\n  | { type: \"progress\"; message: string }\n  | { type: \"complete\"; result: ThreePhaseResponse }\n  | { type: \"error\"; error: string };\n\n// Streaming version of three-phase generation with heartbeats to prevent 504s\nexport async function* threePhaseGenerationStream(\n  request: ThreePhaseRequest\n): AsyncGenerator<ThreePhaseStreamEvent> {\n  const { instruction, sections, aiMemory, notebookId, iterationCount = 0 } = request;\n  \n  // Emit initial status\n  yield { type: \"phase_update\", phase: \"processing\", message: \"Starting AI generation...\" };\n  \n  try {\n    // Start the AI generation in the background\n    let generationComplete = false;\n    let generationResult: ThreePhaseResponse | null = null;\n    let generationError: any = null;\n    \n    // Run generation in background\n    threePhaseGeneration(request).then(\n      result => {\n        generationComplete = true;\n        generationResult = result;\n      },\n      error => {\n        generationComplete = true;\n        generationError = error;\n      }\n    );\n    \n    // Send heartbeat events every 5 seconds while waiting\n    let heartbeatCount = 0;\n    while (!generationComplete) {\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      heartbeatCount++;\n      yield { type: \"progress\", message: `Processing... (${heartbeatCount * 5}s elapsed)` };\n    }\n    \n    // Check if there was an error\n    if (generationError) {\n      throw generationError;\n    }\n    \n    const result = generationResult!;\n    \n    // Stream the result content if there are actions\n    if (result.actions && result.actions.length > 0) {\n      for (const action of result.actions) {\n        yield { type: \"action\", action };\n        \n        // Stream the content in chunks\n        const content = action.content;\n        const chunkSize = 50; // characters per chunk\n        for (let i = 0; i < content.length; i += chunkSize) {\n          const chunk = content.substring(i, i + chunkSize);\n          yield { type: \"content_chunk\", content: chunk };\n          // Small delay to simulate real-time streaming\n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n      }\n    }\n    \n    yield { type: \"complete\", result };\n  } catch (error: any) {\n    console.error(\"Error in streaming generation:\", error);\n    yield { type: \"error\", error: error.message || \"Generation failed\" };\n  }\n}\n\nexport async function threePhaseGeneration(\n  request: ThreePhaseRequest\n): Promise<ThreePhaseResponse> {\n  const { instruction, sections, aiMemory, notebookId, iterationCount = 0 } = request;\n  \n  // Safety limit: prevent infinite loops (high limit - let AI decide when done)\n  const MAX_ITERATIONS = 100;\n  if (iterationCount >= MAX_ITERATIONS) {\n    console.log(`⚠️ Reached maximum iteration limit (${MAX_ITERATIONS}), stopping.`);\n    return {\n      phase: \"review\",\n      actions: [],\n      message: \"Document generation complete (reached iteration limit)\",\n      aiMemory: { ...aiMemory, currentPhase: \"complete\" },\n      confidence: \"medium\",\n      shouldContinue: false,\n      isComplete: true\n    };\n  }\n\n  // Phase 1: Planning (if no plan exists)\n  if (!aiMemory || !aiMemory.plan) {\n    console.log(\"📋 Phase 1: Planning document structure...\");\n    \n    const planningPrompt = `You're a document planning expert. Analyze the request and plan autonomously whenever possible.\n\nTHEIR REQUEST: \"${instruction}\"\n\nYOUR APPROACH:\n1. EXTRACT all explicit details from the request (topic, length, type, etc.)\n2. MAKE REASONABLE DECISIONS about structure and approach\n3. Only ask questions if truly critical information is missing\n4. BE AUTONOMOUS - plan confidently when you can\n\nWHEN TO PROCEED WITHOUT QUESTIONS (hasQuestions = false):\n- Request clearly states the topic and length (e.g., \"5 page paper on X\")\n- You can infer a reasonable structure from the request\n- You can make good decisions about format and approach\n- IMPORTANT: Don't ask about audience unless absolutely necessary - assume educated reader\n\nONLY ASK QUESTIONS (hasQuestions = true) IF:\n- The request is genuinely unclear about the core topic\n- You need critical clarification that affects the entire structure\n- There are multiple contradictory interpretations\n\nGood questions to ask (MAX 1-2, keep SHORT):\n- \"Should this be academic/formal or casual/conversational?\"\n- \"Are you looking for a how-to guide or an analytical essay?\"\n- \"Do you want this focused on theory or practical examples?\"\n\nBAD questions (don't ask these):\n- \"Who will be reading this?\" (assume educated reader)\n- \"What's your level of knowledge?\" (not helpful)\n- Obvious things you can figure out yourself\n\nReturn JSON:\n{\n  \"variables\": {\n    \"topic\": \"main subject (extract the actual topic, not a number)\",\n    \"targetLength\": \"ONLY extract if user specifies: '5 pages', '10 pages', '3000 words', etc. Otherwise null. DO NOT use '500' or any default number.\",\n    \"documentType\": \"research paper OR guide OR essay OR null\",\n    \"focusAreas\": [\"specific topics OR empty\"],\n    \"targetAudience\": \"who this is for OR null\",\n    \"originalInstruction\": \"${instruction}\",\n    \"hasQuestions\": true/false\n  },\n  \"questions\": [\"conversational question 1\", \"conversational question 2\"],\n  \"suggestedTitle\": \"title\",\n  \"requiredSections\": [\"Meaningful Chapter Name 1\", \"Meaningful Chapter Name 2\"],\n  \"tasks\": [{\"action\": \"create\", \"section\": \"Meaningful Chapter Name 1\", \"description\": \"write about X\", \"done\": false}]\n}\n\nCRITICAL SECTION NAMING RULES:\n- DO NOT use generic names like \"Introduction\", \"Body\", \"Conclusion\", \"Chapter 1\", \"Section 1\"\n- DO use DESCRIPTIVE names that tell what the chapter is about\n- Examples for \"why cats are cute\": \"Adorable Physical Features\", \"Endearing Behaviors\", \"The Science of Cuteness\"\n- Examples for \"React hooks\": \"Understanding useState\", \"Working with useEffect\", \"Custom Hook Patterns\"\n\nIf hasQuestions is true, include ONLY 1-2 SHORT conversational questions (we'll ask them one at a time).\nIf hasQuestions is false, questions must be empty array [] and you MUST populate requiredSections and tasks with MEANINGFUL names.`;\n\n    const planResult = await generateWithFallback({\n      messages: [\n        { role: \"system\", content: \"You are a JSON API. You ONLY output valid JSON. Never use markdown. Never add explanations. Never use code blocks. Your entire response must be parseable by JSON.parse().\" },\n        { role: \"user\", content: planningPrompt + \"\\n\\nCRITICAL: Your response must be ONLY the JSON object. Do NOT wrap it in ```json``` code blocks. Start with { and end with }\" }\n      ],\n      temperature: 0.5,\n      max_tokens: 1500,\n    });\n\n    let plan;\n    try {\n      // Try to parse directly\n      plan = JSON.parse(planResult.content);\n      console.log(\"✅ Successfully parsed plan JSON\");\n    } catch {\n      // Try to extract JSON from markdown code blocks\n      const jsonMatch = planResult.content.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n      if (jsonMatch) {\n        try {\n          plan = JSON.parse(jsonMatch[1]);\n          console.log(\"✅ Extracted and parsed plan from markdown code block\");\n        } catch {\n          console.error(\"❌ Failed to parse plan JSON from markdown. Raw response:\", planResult.content.substring(0, 500));\n          plan = {\n            variables: { hasQuestions: false },\n            suggestedTitle: \"Untitled Document\",\n            documentType: \"document\",\n            requiredSections: [],\n            tasks: [{ action: \"create\", section: \"Content\", description: instruction, done: false }],\n            overallGoal: instruction\n          };\n        }\n      } else {\n        console.error(\"❌ No JSON found in plan response. Raw response:\", planResult.content.substring(0, 500));\n        plan = {\n          variables: { hasQuestions: false },\n          suggestedTitle: \"Untitled Document\",\n          documentType: \"document\",\n          requiredSections: [],\n          tasks: [{ action: \"create\", section: \"Content\", description: instruction, done: false }],\n          overallGoal: instruction\n        };\n      }\n    }\n\n    console.log(\"📋 Plan parsed:\", {\n      hasQuestions: plan.variables?.hasQuestions,\n      questionCount: plan.questions?.length || 0,\n      suggestedTitle: plan.suggestedTitle\n    });\n\n    // Check if AI has questions for the user\n    if (plan.variables?.hasQuestions) {\n      // Edge case: hasQuestions=true but no questions array\n      if (!plan.questions || plan.questions.length === 0) {\n        console.warn(\"⚠️ AI set hasQuestions=true but provided no questions - using default questions\");\n        plan.questions = [\n          \"What format would you like? (e.g., research paper, blog post, guide)\",\n          \"How long should this be? (e.g., number of pages or sections)\",\n          \"What specific aspect should I focus on?\",\n          \"Who is the target audience?\"\n        ];\n      }\n      \n      console.log(\"❓ AI has questions - pausing for user input\");\n      console.log(\"Questions:\", plan.questions);\n      \n      // Ask ONE question at a time for more conversational flow\n      const currentQuestionIndex = 0;\n      const updatedMemory = { \n        plan, \n        currentPhase: \"awaiting_answers\",\n        questionIndex: currentQuestionIndex,\n        allQuestions: plan.questions,\n        answers: []\n      };\n      \n      return {\n        phase: \"plan\",\n        actions: [],\n        message: plan.questions[currentQuestionIndex],\n        aiMemory: updatedMemory,\n        confidence: \"high\",\n        suggestedTitle: plan.suggestedTitle,\n        plan,\n        shouldContinue: false\n      };\n    }\n\n    // Safety: Ensure tasks array exists\n    if (!plan.tasks || plan.tasks.length === 0) {\n      console.warn(\"⚠️ Plan has no tasks - generating from requiredSections\");\n      plan.tasks = (plan.requiredSections || []).map((section: string) => ({\n        action: \"create\",\n        section,\n        description: `Write content for ${section}`,\n        done: false\n      }));\n      \n      // If still no tasks, create a default one\n      if (plan.tasks.length === 0) {\n        plan.tasks = [{ action: \"create\", section: \"Content\", description: instruction, done: false }];\n      }\n    }\n\n    // No questions - proceed directly to execution\n    const updatedMemory = { plan, currentPhase: \"execute\" };\n    \n    return {\n      phase: \"plan\",\n      actions: [],\n      message: \"ok, making it now\",\n      aiMemory: updatedMemory,\n      confidence: \"high\",\n      suggestedTitle: plan.suggestedTitle,\n      plan,\n      shouldContinue: true\n    };\n  }\n\n  // Handle awaiting answers phase\n  if (aiMemory.currentPhase === \"awaiting_answers\") {\n    const { allQuestions, answers, questionIndex } = aiMemory;\n    \n    // If we have more questions to ask\n    if (questionIndex + 1 < allQuestions.length) {\n      console.log(`❓ Asking question ${questionIndex + 2}/${allQuestions.length}`);\n      const updatedMemory = { \n        ...aiMemory,\n        questionIndex: questionIndex + 1\n      };\n      \n      return {\n        phase: \"plan\",\n        actions: [],\n        message: allQuestions[questionIndex + 1],\n        aiMemory: updatedMemory,\n        confidence: \"high\",\n        shouldContinue: false\n      };\n    }\n\n    // All questions answered - generate actual plan\n    console.log(\"✅ All questions answered - generating final plan\");\n    const answersText = answers.map((a: string, i: number) => \n      `Q: ${allQuestions[i]}\\nA: ${a}`\n    ).join(\"\\n\\n\");\n\n    const finalPlanPrompt = `Based on the conversation with the user, create a detailed document plan.\n\nORIGINAL REQUEST: \"${instruction}\"\n\nCONVERSATION:\n${answersText}\n\nGenerate a complete plan with meaningful section names and tasks. Return JSON:\n{\n  \"variables\": {\n    \"topic\": \"main subject (extract actual topic, not a number)\",\n    \"targetLength\": \"ONLY if user specified pages/words (e.g., '5 pages', '2000 words'), otherwise null. DO NOT invent a number.\",\n    \"documentType\": \"extracted from answers (e.g., essay, research paper, guide)\",\n    \"targetAudience\": \"extracted from answers or null\",\n    \"tone\": \"extracted from answers OR professional\",\n    \"originalInstruction\": \"${instruction}\"\n  },\n  \"suggestedTitle\": \"document title\",\n  \"requiredSections\": [\"Meaningful Chapter Name 1\", \"Meaningful Chapter Name 2\"],\n  \"tasks\": [{\"action\": \"create\", \"section\": \"Meaningful Chapter Name 1\", \"description\": \"write about X\", \"done\": false}]\n}\n\nCRITICAL: Use DESCRIPTIVE section names, not \"Introduction\", \"Body\", \"Conclusion\", etc.`;\n\n    const finalPlanResult = await generateWithFallback({\n      messages: [\n        { role: \"system\", content: \"You are a JSON API. You ONLY output valid JSON. Never use markdown. Never add explanations. Never use code blocks. Your entire response must be parseable by JSON.parse().\" },\n        { role: \"user\", content: finalPlanPrompt + \"\\n\\nCRITICAL: Your response must be ONLY the JSON object. Do NOT wrap it in ```json``` code blocks. Start with { and end with }\" }\n      ],\n      temperature: 0.5,\n      max_tokens: 1500,\n    });\n\n    let finalPlan;\n    try {\n      finalPlan = JSON.parse(finalPlanResult.content);\n    } catch {\n      const jsonMatch = finalPlanResult.content.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n      if (jsonMatch) {\n        finalPlan = JSON.parse(jsonMatch[1]);\n      } else {\n        finalPlan = {\n          ...aiMemory.plan,\n          requiredSections: [\"Content\"],\n          tasks: [{ action: \"create\", section: \"Content\", description: instruction, done: false }]\n        };\n      }\n    }\n\n    // Safety: Ensure tasks exist\n    if (!finalPlan.tasks || finalPlan.tasks.length === 0) {\n      finalPlan.tasks = (finalPlan.requiredSections || []).map((section: string) => ({\n        action: \"create\",\n        section,\n        description: `Write content for ${section}`,\n        done: false\n      }));\n    }\n\n    const updatedMemory = { plan: finalPlan, currentPhase: \"execute\" };\n    \n    return {\n      phase: \"plan\",\n      actions: [],\n      message: \"ok, making it now\",\n      aiMemory: updatedMemory,\n      confidence: \"high\",\n      suggestedTitle: finalPlan.suggestedTitle,\n      plan: finalPlan,\n      shouldContinue: true\n    };\n  }\n\n  // Phase 2: Execution\n  if (aiMemory.currentPhase === \"execute\") {\n    const plan = aiMemory.plan;\n    \n    // Safety: Ensure plan.tasks exists\n    if (!plan.tasks || plan.tasks.length === 0) {\n      console.warn(\"⚠️ Execute phase but no tasks - generating from requiredSections\");\n      plan.tasks = (plan.requiredSections || []).map((section: string) => ({\n        action: \"create\",\n        section,\n        description: `Write content for ${section}`,\n        done: false\n      }));\n      \n      if (plan.tasks.length === 0) {\n        console.error(\"❌ No tasks and no requiredSections - moving to review\");\n        return {\n          phase: \"review\",\n          actions: [],\n          message: \"No tasks to execute\",\n          aiMemory: { ...aiMemory, currentPhase: \"review\" },\n          confidence: \"low\",\n          shouldContinue: true\n        };\n      }\n    }\n\n    // Find next undone task\n    const nextTask = plan.tasks.find((t: any) => !t.done);\n    \n    if (!nextTask) {\n      console.log(\"✅ All tasks done - moving to review phase\");\n      const updatedMemory = { ...aiMemory, currentPhase: \"review\" };\n      return await threePhaseGeneration({\n        ...request,\n        aiMemory: updatedMemory,\n        iterationCount: iterationCount + 1\n      });\n    }\n\n    console.log(`📝 Executing task: ${nextTask.action} \"${nextTask.section}\"`);\n    \n    const vars = plan.variables || {};\n    const completedSections = sections.filter((s: any) => s.content && s.content.length >= 500);\n    const totalSections = plan.requiredSections?.length || plan.tasks.length;\n    \n    // Calculate target word count per section\n    let targetWordsPerSection = 250; // Default\n    if (vars.targetLength) {\n      const lengthStr = String(vars.targetLength); // Ensure it's a string\n      const lengthMatch = lengthStr.match(/(\\d+)\\s*(page|pages)/i);\n      if (lengthMatch) {\n        const totalPages = parseInt(lengthMatch[1]);\n        const totalWords = totalPages * 250; // 250 words per page\n        targetWordsPerSection = Math.ceil(totalWords / totalSections);\n      }\n    }\n\n    const executionPrompt = `You are writing a document section by section.\n\nDOCUMENT PLAN:\nTopic: ${vars.topic || \"General\"}\nTarget Length: ${vars.targetLength || \"Not specified\"}\nType: ${vars.documentType || \"document\"}\nTone: ${vars.tone || \"professional\"}\nTarget Audience: ${vars.targetAudience || \"general\"}\n\nPROGRESS: ${completedSections.length}/${totalSections} sections completed\n\nCURRENT SECTIONS:\n${sections.map(s => `## ${s.title}\\n${s.content || '(empty)'}`).join('\\n\\n')}\n\nNEXT TASK: ${nextTask.action} \"${nextTask.section}\" - ${nextTask.description}\n\nCRITICAL LENGTH REQUIREMENTS:\n- TARGET WORD COUNT FOR THIS SECTION: ~${targetWordsPerSection} words\n- This ensures the final document matches \"${vars.targetLength}\" when formatted in Times New Roman 12pt, double-spaced\n- Standard academic format: ~250 words = 1 page in Times New Roman 12pt, double-spaced\n- Write ENOUGH content to hit this word count target\n- Do NOT write less - users expect the full length when they copy to Word\n\nIMPORTANT GUIDELINES:\n- Write LONG, THOROUGH content matching the word count target (~${targetWordsPerSection} words)\n- Use ${vars.tone} tone throughout\n- Include specific details, examples, and comprehensive explanations\n- Make content professional and well-structured\n- EACH CHAPTER MUST HAVE MULTIPLE PARAGRAPHS (3-6 paragraphs to hit word count)\n- Separate paragraphs with double newlines (\\n\\n)\n- Each paragraph should be 50-100 words (substantial, not short)\n- Think like a book: each chapter has multiple paragraphs covering different aspects in depth\n\nRespond with JSON (ESCAPE all newlines as \\\\n in the content field):\n{\n  \"actions\": [\n    {\n      \"type\": \"update\" | \"create\",\n      \"sectionId\": \"section-id-or-new-title\",\n      \"content\": \"Paragraph 1 with details.\\\\n\\\\nParagraph 2 expanding on the topic.\\\\n\\\\nParagraph 3 with examples.\"\n    }\n  ],\n  \"message\": \"what you did\"\n}\n\nCRITICAL: In the \"content\" field, use \\\\n for newlines, NOT actual line breaks.`;\n\n    const execResult = await generateWithFallback({\n      messages: [\n        { role: \"system\", content: \"You are a JSON API. You ONLY output valid JSON. Never use markdown. Never add explanations. Never use code blocks. Your entire response must be parseable by JSON.parse().\" },\n        { role: \"user\", content: executionPrompt + \"\\n\\nCRITICAL FORMAT REQUIREMENT:\\nYour response must be ONLY the JSON object shown above.\\nDo NOT wrap it in ```json``` or ``` code blocks.\\nDo NOT add any text before or after the JSON.\\nYour ENTIRE response must be valid JSON that can be parsed directly.\\n\\nStart your response with { and end with }\" }\n      ],\n      temperature: 0.7,\n      max_tokens: 3000,\n    });\n\n    let execResponse;\n    let parseSuccess = false;\n    \n    console.log(\"🔍 RAW AI RESPONSE:\", execResult.content);\n    \n    try {\n      // Try to parse directly\n      execResponse = JSON.parse(execResult.content);\n      parseSuccess = true;\n      console.log(\"✅ Successfully parsed execution JSON directly\");\n    } catch (parseError) {\n      console.log(\"❌ JSON Parse Error - Direct parse failed\");\n      console.log(\"Error:\", parseError);\n      \n      // Try to fix common issues: literal newlines in strings\n      try {\n        console.log(\"🔧 Attempting to fix literal newlines in JSON strings...\");\n        \n        // Properly fix newlines in JSON strings by walking character-by-character\n        const fixedContent = fixJsonNewlines(execResult.content);\n        \n        execResponse = JSON.parse(fixedContent);\n        parseSuccess = true;\n        console.log(\"✅ Successfully parsed after fixing literal newlines\");\n      } catch (fixError) {\n        console.log(\"❌ Failed to parse even after fixing newlines\");\n        console.log(\"Fix error:\", fixError);\n        \n        // Try to extract JSON from markdown code blocks\n        const jsonMatch = execResult.content.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n        if (jsonMatch) {\n          try {\n            execResponse = JSON.parse(jsonMatch[1]);\n            parseSuccess = true;\n            console.log(\"✅ Successfully extracted JSON from markdown code block\");\n          } catch (markdownError) {\n            console.log(\"❌ Failed to parse JSON from markdown block\");\n          }\n        }\n      }\n      \n      // If all parsing failed, return error without marking task as done\n      if (!parseSuccess) {\n        console.log(\"❌ All JSON parsing attempts failed - will retry on next iteration\");\n        return {\n          phase: \"execute\",\n          actions: [],\n          message: `AI returned invalid format. Please try again or rephrase your request.`,\n          aiMemory: aiMemory, // Don't update - keep task as not done\n          confidence: \"low\",\n          plan: aiMemory.plan,\n          shouldContinue: false // Stop and let user see the error\n        };\n      }\n    }\n\n    // Only mark task as done if we successfully parsed the response\n    const updatedTasks = plan.tasks.map((t: any) =>\n      t === nextTask ? { ...t, done: parseSuccess } : t\n    );\n\n    const updatedMemory = {\n      ...aiMemory,\n      plan: { ...plan, tasks: updatedTasks }\n    };\n\n    // Check if all tasks are done\n    const allTasksDone = updatedTasks.every((t: any) => t.done);\n\n    // If all tasks done, move to review phase\n    if (allTasksDone) {\n      updatedMemory.currentPhase = \"review\";\n    }\n\n    // Generate progress message for UI\n    const progressMessage = `Writing ${nextTask.section}... (${completedSections.length + 1}/${totalSections} completed)`;\n\n    return {\n      phase: \"execute\",\n      actions: execResponse.actions || [],\n      message: execResponse.message || `Completed ${nextTask.section}`,\n      progressMessage,\n      aiMemory: updatedMemory,\n      confidence: \"high\",\n      plan: updatedMemory.plan,\n      shouldContinue: !allTasksDone\n    };\n  }\n\n  // Phase 3: Review\n  if (aiMemory.currentPhase === \"review\") {\n    console.log(\"🔍 Phase 3: Reviewing content quality...\");\n    \n    const reviewPrompt = `Review the document content for quality and completeness.\n\nORIGINAL REQUEST: \"${instruction}\"\n\nDOCUMENT PLAN:\n${JSON.stringify(aiMemory.plan.variables, null, 2)}\n\nSECTIONS:\n${sections.map(s => `## ${s.title}\\nLength: ${s.content.length} chars\\nContent: ${s.content.substring(0, 200)}...`).join('\\n\\n')}\n\nEvaluate:\n1. Does each section have substantial content (500+ characters)?\n2. Is the content high-quality and relevant?\n3. Does it match the user's requirements?\n4. Are there any improvements needed?\n\nReturn JSON:\n{\n  \"quality\": \"excellent\" | \"good\" | \"needs_improvement\",\n  \"isComplete\": true/false,\n  \"message\": \"brief summary\",\n  \"nextTasks\": [{\"action\": \"update\", \"section\": \"section name\", \"description\": \"what to improve\", \"done\": false}]\n}\n\nIf content is good and complete, return isComplete: true with empty nextTasks.\nIf improvements needed, specify tasks in nextTasks array.`;\n\n    const reviewResult = await generateWithFallback({\n      messages: [\n        { role: \"system\", content: \"You are a content quality reviewer. You MUST respond with ONLY valid JSON, no markdown, no explanations, no code blocks. Just pure JSON.\" },\n        { role: \"user\", content: reviewPrompt }\n      ],\n      temperature: 0.3,\n      max_tokens: 1000,\n    });\n\n    let review;\n    try {\n      review = JSON.parse(reviewResult.content);\n    } catch {\n      const jsonMatch = reviewResult.content.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n      if (jsonMatch) {\n        review = JSON.parse(jsonMatch[1]);\n      } else {\n        review = { quality: \"good\", isComplete: true, message: \"Review complete\", nextTasks: [] };\n      }\n    }\n\n    // Early exit: Check if all sections are green (>500 chars)\n    const allSectionsGreen = sections.every((s: any) => s.content && s.content.length >= 500);\n    if (allSectionsGreen) {\n      console.log(\"✅ All sections are green (>500 chars) - work is complete!\");\n      review.isComplete = true;\n      review.nextTasks = [];\n    }\n\n    // If work is incomplete, add new tasks and switch to execute phase\n    if (!review.isComplete && review.nextTasks && review.nextTasks.length > 0) {\n      console.log(`🔄 Review found improvements needed. Adding ${review.nextTasks.length} new tasks...`);\n      const updatedMemory = { \n        ...aiMemory, \n        currentPhase: \"execute\", \n        plan: { ...aiMemory.plan, tasks: [...aiMemory.plan.tasks, ...review.nextTasks] }\n      };\n      \n      return {\n        phase: \"review\",\n        actions: [],\n        message: review.message || \"Needs improvement\",\n        aiMemory: updatedMemory,\n        confidence: review.quality === \"excellent\" ? \"high\" : review.quality === \"good\" ? \"medium\" : \"low\",\n        plan: updatedMemory.plan,\n        shouldContinue: true,\n        isComplete: false\n      };\n    }\n\n    // Work is complete - move to post-processing phase\n    console.log(\"✅ Review complete - moving to post-processing for AI detection avoidance\");\n    const updatedMemory = { ...aiMemory, currentPhase: \"postprocess\" };\n    \n    return await threePhaseGeneration({\n      ...request,\n      aiMemory: updatedMemory,\n      iterationCount: iterationCount + 1\n    });\n  }\n\n  // Phase 4: Post-processing for AI detection avoidance\n  if (aiMemory.currentPhase === \"postprocess\") {\n    console.log(\"🎨 Phase 4: Post-processing to enhance human-like qualities...\");\n    \n    const postProcessPrompt = `You are a content humanizer. Review each section and make subtle improvements to avoid AI detection.\n\nSECTIONS:\n${sections.map(s => `## ${s.title}\\n${s.content}`).join('\\n\\n')}\n\nMake these improvements:\n1. Vary sentence structure and length\n2. Add more natural transitions\n3. Include subtle imperfections (not errors, just human touches)\n4. Ensure varied vocabulary\n5. Make the writing feel more conversational where appropriate\n\nReturn JSON with updated sections:\n{\n  \"actions\": [\n    {\"type\": \"update\", \"sectionId\": \"section-id\", \"content\": \"improved content\"}\n  ],\n  \"message\": \"summary of changes\"\n}\n\nOnly include actions for sections that need changes. If content is already good, return empty actions.`;\n\n    const postProcessResult = await generateWithFallback({\n      messages: [\n        { role: \"system\", content: \"You are a content enhancement specialist. You MUST respond with ONLY valid JSON, no markdown, no explanations, no code blocks. Just pure JSON.\" },\n        { role: \"user\", content: postProcessPrompt }\n      ],\n      temperature: 0.7,\n      max_tokens: 4000,\n    });\n\n    let postProcessResponse;\n    try {\n      postProcessResponse = JSON.parse(postProcessResult.content);\n    } catch {\n      const jsonMatch = postProcessResult.content.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n      if (jsonMatch) {\n        postProcessResponse = JSON.parse(jsonMatch[1]);\n      } else {\n        postProcessResponse = { actions: [], message: \"No changes needed\" };\n      }\n    }\n\n    // Mark as complete\n    const updatedMemory = { ...aiMemory, currentPhase: \"complete\" };\n\n    return {\n      phase: \"postprocess\",\n      actions: postProcessResponse.actions || [],\n      message: postProcessResponse.message || \"Document finalized\",\n      aiMemory: updatedMemory,\n      confidence: \"high\",\n      shouldContinue: false,\n      isComplete: true\n    };\n  }\n\n  // Fallback: Unknown phase\n  console.error(\"❌ Unknown phase:\", aiMemory.currentPhase);\n  return {\n    phase: \"review\",\n    actions: [],\n    message: \"Unknown phase - restarting\",\n    aiMemory: { currentPhase: \"execute\" },\n    confidence: \"low\",\n    shouldContinue: false\n  };\n}\n","size_bytes":36240},"client/src/pages/Settings.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { LogOut, Coins, Zap, TrendingUp, Clock, CheckCircle2, XCircle } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\ntype Transaction = {\n  id: string;\n  type: \"purchase\" | \"deduction\";\n  amount: number;\n  description: string;\n  createdAt: string;\n};\n\nexport default function Settings() {\n  const { logoutMutation, user } = useAuth();\n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const [selectedModel, setSelectedModel] = useState<string>(\"free\");\n\n  const { data: creditsData, isLoading: creditsLoading } = useQuery<{ credits: number; selectedAiModel: string }>({\n    queryKey: [\"/api/user/credits\"],\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/user/transactions\"],\n  });\n\n  // Sync selected model with backend\n  useEffect(() => {\n    if (creditsData?.selectedAiModel) {\n      setSelectedModel(creditsData.selectedAiModel);\n    }\n  }, [creditsData]);\n\n  // Check for payment success/cancel from URL params\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const payment = params.get(\"payment\");\n    \n    if (payment === \"success\") {\n      toast({\n        title: \"Credits purchased!\",\n        description: \"Your credits have been added to your account.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/credits\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      // Remove query param\n      window.history.replaceState({}, \"\", \"/settings\");\n    } else if (payment === \"cancelled\") {\n      toast({\n        title: \"Payment cancelled\",\n        description: \"Your purchase was cancelled.\",\n        variant: \"destructive\",\n      });\n      window.history.replaceState({}, \"\", \"/settings\");\n    }\n  }, [toast]);\n\n  const updateModelMutation = useMutation({\n    mutationFn: async (model: string) => {\n      return await apiRequest(\"PATCH\", \"/api/user/ai-model\", { model });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/credits\"] });\n      toast({\n        title: \"AI model updated\",\n        description: \"Your AI model preference has been saved.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update AI model\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const buyCredits = useMutation({\n    mutationFn: async (pkg: string) => {\n      const response = await apiRequest(\"POST\", \"/api/stripe/create-checkout\", { package: pkg });\n      const data = await response.json();\n      return data;\n    },\n    onSuccess: (data) => {\n      if (data.url) {\n        window.location.href = data.url;\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create checkout session\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleModelChange = (model: string) => {\n    setSelectedModel(model);\n    updateModelMutation.mutate(model);\n  };\n\n  const credits = creditsData?.credits || 0;\n  const creditsInDollars = (credits / 1000).toFixed(2);\n  const hasPremium = credits > 0;\n\n  return (\n    <div className=\"p-8 max-w-4xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-2\">Settings</h1>\n      <p className=\"text-muted-foreground mb-8\">Manage your account and premium features</p>\n      \n      <div className=\"space-y-8\">\n        {/* Premium Features Section */}\n        <div id=\"premium-features\" className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Premium Features</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Coins className=\"h-5 w-5\" />\n                Credits & Premium\n              </CardTitle>\n              <CardDescription>Manage your credits for premium AI features</CardDescription>\n            </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Current Balance</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-credit-balance\">\n                  {creditsLoading ? \"...\" : `${credits.toLocaleString()} credits`}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">${creditsInDollars} USD equivalent</p>\n              </div>\n              <Coins className=\"h-12 w-12 text-muted-foreground\" />\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-3\">Purchase Credits</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto py-4 flex flex-col items-start\"\n                  onClick={() => buyCredits.mutate(\"5\")}\n                  disabled={buyCredits.isPending}\n                  data-testid=\"button-buy-credits-5\"\n                >\n                  <span className=\"font-semibold\">Starter</span>\n                  <span className=\"text-sm text-muted-foreground\">5,000 credits</span>\n                  <span className=\"text-lg font-bold mt-1\">$5.00</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto py-4 flex flex-col items-start relative\"\n                  onClick={() => buyCredits.mutate(\"10\")}\n                  disabled={buyCredits.isPending}\n                  data-testid=\"button-buy-credits-10\"\n                >\n                  <span className=\"font-semibold\">Popular</span>\n                  <span className=\"text-sm text-muted-foreground\">11,000 credits (+10% bonus)</span>\n                  <span className=\"text-lg font-bold mt-1\">$10.00</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto py-4 flex flex-col items-start\"\n                  onClick={() => buyCredits.mutate(\"25\")}\n                  disabled={buyCredits.isPending}\n                  data-testid=\"button-buy-credits-25\"\n                >\n                  <span className=\"font-semibold\">Pro</span>\n                  <span className=\"text-sm text-muted-foreground\">30,000 credits (+20% bonus)</span>\n                  <span className=\"text-lg font-bold mt-1\">$25.00</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto py-4 flex flex-col items-start\"\n                  onClick={() => buyCredits.mutate(\"50\")}\n                  disabled={buyCredits.isPending}\n                  data-testid=\"button-buy-credits-50\"\n                >\n                  <span className=\"font-semibold\">Best Value</span>\n                  <span className=\"text-sm text-muted-foreground\">65,000 credits (+30% bonus)</span>\n                  <span className=\"text-lg font-bold mt-1\">$50.00</span>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"h-5 w-5\" />\n                AI Model Selection\n              </CardTitle>\n              <CardDescription>Choose your AI speed and quality</CardDescription>\n            </CardHeader>\n            <CardContent>\n            <RadioGroup value={selectedModel} onValueChange={handleModelChange}>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3 p-4 rounded-lg border hover-elevate cursor-pointer\">\n                  <RadioGroupItem value=\"free\" id=\"free\" data-testid=\"radio-model-free\" />\n                  <Label htmlFor=\"free\" className=\"flex-1 cursor-pointer\">\n                    <div className=\"font-semibold\">Free (Slower)</div>\n                    <div className=\"text-sm text-muted-foreground mt-1\">\n                      Cost: <span className=\"font-medium\">Free</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Quality: Good for most documents\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Speed: 30-60 seconds per chapter\n                    </div>\n                  </Label>\n                </div>\n\n                <div className={`flex items-start space-x-3 p-4 rounded-lg border ${!hasPremium ? 'opacity-50' : 'hover-elevate cursor-pointer'}`}>\n                  <RadioGroupItem value=\"fast\" id=\"fast\" disabled={!hasPremium} data-testid=\"radio-model-fast\" />\n                  <Label htmlFor=\"fast\" className={`flex-1 ${hasPremium ? 'cursor-pointer' : 'cursor-not-allowed'}`}>\n                    <div className=\"font-semibold\">Fast (Premium)</div>\n                    <div className=\"text-sm text-muted-foreground mt-1\">\n                      Cost: <span className=\"font-medium\">~20-40 credits per chapter</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Quality: Better writing, faster responses\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Speed: 10-20 seconds per chapter\n                    </div>\n                    {!hasPremium && (\n                      <div className=\"text-sm text-destructive mt-2\">Requires credits</div>\n                    )}\n                  </Label>\n                </div>\n\n                <div className={`flex items-start space-x-3 p-4 rounded-lg border ${!hasPremium ? 'opacity-50' : 'hover-elevate cursor-pointer'}`}>\n                  <RadioGroupItem value=\"ultra\" id=\"ultra\" disabled={!hasPremium} data-testid=\"radio-model-ultra\" />\n                  <Label htmlFor=\"ultra\" className={`flex-1 ${hasPremium ? 'cursor-pointer' : 'cursor-not-allowed'}`}>\n                    <div className=\"font-semibold\">Ultra Fast (Premium)</div>\n                    <div className=\"text-sm text-muted-foreground mt-1\">\n                      Cost: <span className=\"font-medium\">~400-600 credits per chapter</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Quality: Best quality, professional-grade\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Speed: 5-10 seconds per chapter\n                    </div>\n                    {!hasPremium && (\n                      <div className=\"text-sm text-destructive mt-2\">Requires credits</div>\n                    )}\n                  </Label>\n                </div>\n              </div>\n            </RadioGroup>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Billing Section */}\n        <div id=\"billing\" className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Billing</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Transaction Log\n              </CardTitle>\n              <CardDescription>View all credit purchases and usage</CardDescription>\n            </CardHeader>\n            <CardContent>\n            {transactionsLoading ? (\n              <p className=\"text-sm text-muted-foreground\">Loading transactions...</p>\n            ) : transactions.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground\">No transactions yet</p>\n            ) : (\n              <div className=\"space-y-2\">\n                {transactions.map((tx) => (\n                  <div\n                    key={tx.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg border\"\n                    data-testid={`transaction-${tx.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      {tx.type === \"purchase\" ? (\n                        <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                      ) : (\n                        <XCircle className=\"h-5 w-5 text-orange-500\" />\n                      )}\n                      <div>\n                        <p className=\"font-medium text-sm\">{tx.description}</p>\n                        <p className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          {formatDistanceToNow(new Date(tx.createdAt), { addSuffix: true })}\n                        </p>\n                      </div>\n                    </div>\n                    <div className={`font-semibold ${tx.amount > 0 ? 'text-green-600' : 'text-orange-600'}`}>\n                      {tx.amount > 0 ? '+' : ''}{tx.amount.toLocaleString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Account Section */}\n        <div id=\"account\" className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Account</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Account Information</CardTitle>\n              <CardDescription>Your account details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">Username</label>\n              <p className=\"text-base mt-1\">{user?.username}</p>\n            </div>\n            {user?.email && (\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                <p className=\"text-base mt-1\">{user.email}</p>\n              </div>\n            )}\n            <div className=\"pt-4\">\n              <Button \n                variant=\"destructive\" \n                onClick={handleLogout}\n                data-testid=\"button-logout-settings\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Preferences Section */}\n        <div id=\"preferences\" className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Preferences</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Appearance</CardTitle>\n              <CardDescription>Customize how the app looks</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Theme</p>\n                  <p className=\"text-sm text-muted-foreground\">Switch between light and dark mode</p>\n                </div>\n                <ThemeToggle />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15796},"client/src/components/MainHeader.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Sparkles } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport function MainHeader() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: creditsData } = useQuery<{ credits: number; selectedAiModel: string }>({\n    queryKey: [\"/api/user/credits\"],\n  });\n\n  const buyCredits = useMutation({\n    mutationFn: async (pkg: string) => {\n      const response = await apiRequest(\"POST\", \"/api/stripe/create-checkout\", { package: pkg });\n      const data = await response.json();\n      return data;\n    },\n    onSuccess: (data) => {\n      if (data.url) {\n        window.location.href = data.url;\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create checkout session\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const credits = creditsData?.credits || 0;\n  const hasPremium = credits > 0;\n\n  const handleUpgradeClick = () => {\n    if (hasPremium) {\n      // Already have credits, redirect to settings to buy more\n      setLocation(\"/settings\");\n    } else {\n      // No credits, go to settings to see purchase options\n      setLocation(\"/settings\");\n    }\n  };\n\n  return (\n    <div className=\"border-b bg-background\">\n      <div className=\"flex items-center justify-end h-14 px-6\">\n        <Button\n          variant={hasPremium ? \"outline\" : \"default\"}\n          size=\"sm\"\n          onClick={handleUpgradeClick}\n          data-testid=\"button-header-upgrade\"\n          className=\"gap-2\"\n        >\n          <Sparkles className=\"h-4 w-4\" />\n          {hasPremium ? \"Buy More Credits\" : \"Upgrade\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1886}},"version":2}